-- phpMyAdmin SQL Dump
-- version 4.2.7.1
-- http://www.phpmyadmin.net
--
-- Хост: 127.0.0.1
-- Время создания: Ноя 02 2014 г., 05:04
-- Версия сервера: 5.5.39
-- Версия PHP: 5.4.31

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- База данных: `demo`
--

-- --------------------------------------------------------

--
-- Структура таблицы `articles_category`
--

CREATE TABLE IF NOT EXISTS 'articles_category' (
  `id` int(11) NOT NULL,
  `title` varchar(100) NOT NULL,
  `alias` varchar(100) NOT NULL,
  `parent_id` int(11) DEFAULT NULL,
  `status_id` smallint(6) NOT NULL DEFAULT '0',
  `created_at` int(11) DEFAULT NULL,
  `updated_at` int(11) DEFAULT NULL
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=10 ;

--
-- Дамп данных таблицы `articles_category`
--

INSERT INTO 'articles_category' (`id`, `title`, `alias`, `parent_id`, `status_id`, `created_at`, `updated_at`) VALUES
  (1, 'Yii', 'yii', NULL, 1, 1414529027, 1414529027),
  (2, 'PHP', 'php', NULL, 1, 1414734771, 1414734771),
  (3, 'Информационная безопасность', 'informatsionnaya-bezopasnostj', NULL, 1, 1414735169, 1414735169),
  (4, 'Программирование', 'programmirovanie', NULL, 1, 1414735385, 1414735385),

-- --------------------------------------------------------

--
-- Структура таблицы `articles`
--

CREATE TABLE IF NOT EXISTS 'articles' (
`id` int(11) NOT NULL,
  `title` varchar(100) NOT NULL,
  `alias` varchar(100) NOT NULL,
  `category_id` int(11) DEFAULT NULL,
  `author_id` int(11) DEFAULT NULL,
  `snippet` text NOT NULL,
  `content` longtext NOT NULL,
  `image_url` varchar(64) NOT NULL,
  `preview_url` varchar(64) NOT NULL,
  `status_id` tinyint(4) NOT NULL DEFAULT '0',
  `created_at` int(11) NOT NULL,
  `updated_at` int(11) NOT NULL
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=12 ;

--
-- Дамп данных таблицы `articles`
--

INSERT INTO `articles` (`id`, `title`, `alias`, `category_id`, `author_id`, `snippet`, `content`, `image_url`, `preview_url`, `status_id`, `created_at`, `updated_at`) VALUES
(1, 'Yii 2.0. Релиз', 'yii-20-reliz', 1, NULL, '<p>После трёх лет интенсивной разработки и почти <a href="https://github.com/yiisoft/yii2/commits/master">10000 коммитов</a> более <a href="https://github.com/yiisoft/yii2/graphs/contributors">300 авторов</a> вышла стабильная версия PHP фреймворка Yii 2.0! Спасибо за поддержку и терпение!</p><p><br><br>Как вы, возможно, уже знаете, Yii 2.0 был переписан с нуля. Это решение было принято, так как мы хотели получить отличный PHP фреймворк, который сохранит простоту и расширяемость Yii и, в то же время, будет использовать свежие технологии и возможности, чтобы стать ещё лучше. Сегодня мы рады сообщить, что цель достигнута.</p><p><br><br>Немного полезных ссылок про Yii и Yii 2.0:</p><p><br><br></p><ul><li><a href="http://www.yiiframework.com/">Официальный сайт Yii</a></li><li><a href="https://github.com/yiisoft/yii2">Yii 2.0 на GitHub</a>: для того, чтобы следить за разработкой проекта, можно поставить звёздочку и/или использовать кнопку watch.</li><li><a href="https://www.facebook.com/groups/yiitalk/">Группа на Facebook</a></li><li><a href="https://twitter.com/yiiframework">Twitter</a></li><li><a href="http://yiiframework.ru/">yiiframework.ru</a></li></ul><p><br><br>Далее мы рассмотрим самые интересные возможности новой версии. Если вы спешите попробовать фреймворк в деле, начните с чтения раздела руководства <a href="http://www.yiiframework.com/doc-2.0/guide-index.html#getting-started">Getting Started</a>.</p>', '<p>После трёх лет интенсивной разработки и почти <a href="https://github.com/yiisoft/yii2/commits/master">10000 коммитов</a> более <a href="https://github.com/yiisoft/yii2/graphs/contributors">300 авторов</a> вышла стабильная версия PHP фреймворка Yii 2.0! Спасибо за поддержку и терпение!</p><p><br><br>Как вы, возможно, уже знаете, Yii 2.0 был переписан с нуля. Это решение было принято, так как мы хотели получить отличный PHP фреймворк, который сохранит простоту и расширяемость Yii и, в то же время, будет использовать свежие технологии и возможности, чтобы стать ещё лучше. Сегодня мы рады сообщить, что цель достигнута.</p><p><br><br>Немного полезных ссылок про Yii и Yii 2.0:</p><p><br><br></p><ul><li><a href="http://www.yiiframework.com/">Официальный сайт Yii</a></li><li><a href="https://github.com/yiisoft/yii2">Yii 2.0 на GitHub</a>: для того, чтобы следить за разработкой проекта, можно поставить звёздочку и/или использовать кнопку watch.</li><li><a href="https://www.facebook.com/groups/yiitalk/">Группа на Facebook</a></li><li><a href="https://twitter.com/yiiframework">Twitter</a></li><li><a href="http://yiiframework.ru/">yiiframework.ru</a></li></ul><p><br><br>Далее мы рассмотрим самые интересные возможности новой версии. Если вы спешите попробовать фреймворк в деле, начните с чтения раздела руководства <a href="http://www.yiiframework.com/doc-2.0/guide-index.html#getting-started">Getting Started</a>.</p><p><br><br><a name="habracut"></a></p><p><br><br></p><h4>Самое интересное</h4><p><br><br></p><h5>Следование стандартам и использование последних технологий</h5><p><br><br>Yii 2.0 использует пространства имён и трейты PHP, <a href="http://www.php-fig.org/psr/">стандарты PSR</a>, <a href="https://getcomposer.org/">Composer</a> и <a href="http://bower.io/">Bower</a>. Всё это делает работу с фреймворком более приятной. Сторонние библиотеки теперь использовать намного проще.</p><p><br><br></p><h5>Надёжная основа</h5><p><br><br>Как и в 1.1, в Yii 2.0 поддерживаются <a href="http://www.yiiframework.com/doc-2.0/guide-concept-properties.html">свойства объектов</a> через геттеры и сеттеры, <a href="http://www.yiiframework.com/doc-2.0/guide-concept-configurations.html">конфигурации</a>, <a href="http://www.yiiframework.com/doc-2.0/guide-concept-events.html">события</a> и <a href="http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html">поведения</a>. Новый код более эффективен и выразителен. К примеру, обработать событие вы можете следующим образом:</p><p><br><br></p><pre><code><span class="variable" data-redactor-tag="span">$response</span> = <span class="keyword">new</span> yii\\web\\Response; <span class="variable">$response</span>-&gt;on(<span class="string">''beforeSend''</span>, <span class="function"><span class="keyword" data-redactor-class="keyword">function</span> <span class="params">(<span class="variable" data-redactor-class="variable">$event</span>)</span> {</span> <span class="comment">// обрабатываем событие "beforeSend"</span> }); </code></pre><p><br><br>В Yii 2.0 реализованы <a href="http://www.yiiframework.com/doc-2.0/guide-concept-di-container.html">dependency injection container</a> и <a href="http://www.yiiframework.com/doc-2.0/guide-concept-service-locator.html">service locator</a>. При правильном использовании они делают приложения более гибкими и тестируемыми.</p><p><br><br></p><h5>Инструменты для разработки</h5><p><br><br>В Yii 2.0 включены несколько инструментов, которые облегчают разработчикам жизнь.</p><p><br><br><a href="http://www.yiiframework.com/doc-2.0/guide-tool-debugger.html">Отладчик Yii</a> позволяет изучать детали работы вашего приложения. Он также может использоваться для профилирования производительности и поиска узких мест.</p><p><br><br>Как и в версии 1.1, в Yii 2.0 есть существенно экономящий время <a href="http://www.yiiframework.com/doc-2.0/guide-tool-gii.html">генератор кода Gii</a>. Он отлично расширяется, что позволяет создавать свои генераторы. Работать с Gii можно как из браузера, так и из консоли.</p><p><br><br>Документация по API Yii 1.1 получила немало хвалебных отзывов. Многие хотели такой же документации для своих проектов, поэтому в Yii 2.0 включён <a href="https://github.com/yiisoft/yii2/tree/master/extensions/apidoc">генератор документации</a>. Он поддерживает Markdown, что позволяет писать более лаконично и выразительно.</p><p><br><br></p><h5>Безопасность</h5><p><br><br>Yii 2.0 помогает вам писать более безопасный код. В фреймворке имеются возможности для предотвращения SQL инъекций, XSS атак, CSRF атак, подделки cookie и т.д. Некоторые части кода были проверены экспертами по безопасности <a href="https://github.com/tom--">Tom Worster</a> и<a href="https://github.com/ircmaxell">Anthony Ferrara</a> и впоследствии переписаны.</p><p><br><br></p><h5>Базы данных</h5><p><br><br>Работа с базами данных никогда не была такой простой. В Yii 2.0 поддерживаются <a href="http://www.yiiframework.com/doc-2.0/guide-db-migrations.html">миграции</a>, <a href="http://www.yiiframework.com/doc-2.0/guide-db-dao.html">DAO</a>, <a href="http://www.yiiframework.com/doc-2.0/guide-db-query-builder.html">построитель запросов</a> и <a href="http://www.yiiframework.com/doc-2.0/guide-db-active-record.html">Active Record</a>. Если сравнивать с 1.1, в версии 2.0 улучшена производительность Active Record, а синтаксис для работы с ним такой же, как и при работе с построителем запросов. Ниже показано получение данных клиента при помощи построителя запросов и Active Record. В обоих случаях используется цепочка вызова методов, напоминающая SQL.</p><p><br><br></p><pre><code><span class="keyword" data-redactor-tag="span">use</span> yii\\db\\Query; <span class="keyword">use</span> app\\models\\Customer; <span class="variable">$customers</span> = (<span class="keyword">new</span> Query)-&gt;from(<span class="string">''customer''</span>) -&gt;where([<span class="string">''status''</span> =&gt; Customer::STATUS_ACTIVE]) -&gt;orderBy(<span class="string">''id''</span>) -&gt;all(); <span class="variable">$customers</span> = Customer::find() -&gt;where([<span class="string">''status''</span> =&gt; Customer::STATUS_ACTIVE]) -&gt;orderBy(<span class="string">''id''</span>) -&gt;asArray(); -&gt;all(); </code></pre><p><br><br>Следующий код показывает выборки связанных данных через Active Record:</p><p><br><br></p><pre><code><span class="keyword" data-redactor-tag="span">namespace</span> app\\models; <span class="keyword">use</span> app\\models\\Order; <span class="keyword">use</span> yii\\db\\ActiveRecord; <span class="class"><span class="keyword" data-redactor-class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span> {</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword" data-redactor-class="keyword">function</span> <span class="title">tableName</span><span class="params">()</span> {</span> <span class="keyword">return</span> <span class="string">''customer''</span>; } <span class="comment">// задаёт связь типа one-to-many с моделью Order</span> <span class="keyword">public</span> <span class="function"><span class="keyword" data-redactor-class="keyword">function</span> <span class="title">getOrders</span><span class="params">()</span> {</span> <span class="keyword">return</span> <span class="variable">$this</span>-&gt;hasMany(Order::className(), [<span class="string">''customer_id''</span> =&gt; <span class="string">''id''</span>]); } } <span class="comment">// возвращает клиента с id равным 100</span> <span class="variable">$customer</span> = Customer::findOne(<span class="number">100</span>); <span class="comment">// возвращает заказы клиента</span> <span class="variable">$orders</span> = <span class="variable">$customer</span>-&gt;orders; </code></pre><p><br><br>Ниже мы обновляем запись о клиенте. При этом используется связывание параметров, что практически исключает возможность SQL инъекции. В базу сохраняются только изменённые данные.</p><p><br><br></p><pre><code><span class="variable" data-redactor-tag="span">$customer</span> = Customer::findOne(<span class="number">100</span>); <span class="variable">$customer</span>-&gt;address = <span class="string">''123 Anderson St''</span>; <span class="variable">$customer</span>-&gt;save(); <span class="comment">// выполнит SQL: UPDATE `customer` SET `address`=''123 Anderson St'' WHERE `id`=100</span> </code></pre><p><br><br>Yii 2.0 поддерживает множество баз данных. Помимо традиционно используемых реляционных баз добавлена поддержка Cubrid, ElasticSearch и Sphinx. Также поддерживаются и NoSQL хранилища, такие как Redis и MongoDB. Для доступа ко всем этим базам данных, как через построитель запросов, так и через Active Record используется тот же самый API, что позволяет легко перейти от использования одного хранилища, к использованию другого. При использовании Active Record можно строить связи между данными из разных баз (например, между MySQL и Redis).</p><p><br><br>Для приложений с большими базами и высокими требованиями к производительности в Yii 2.0 реализована поддержка<a href="http://www.yiiframework.com/doc-2.0/guide-db-dao.html#replication-and-read-write-splitting">репликации БД и разделение чтения/записи</a>.</p><p><br><br></p><h5>RESTful API</h5><p><br><br>Yii позволяет получить рабочий и совместимый с последними протоколами <a href="http://www.yiiframework.com/doc-2.0/guide-rest-quick-start.html">RESTful API</a> написав всего пару строчек кода. Пример ниже показывает создание RESTful API для данных пользователя.</p><p><br><br>Сначала создаём контроллер <code>app\\controllers\\UserController</code> и указываем <code>app\\models\\User</code> в качестве модели данных:</p><p><br><br></p><pre><code><span class="keyword" data-redactor-tag="span">namespace</span> app\\controllers; <span class="keyword">use</span> yii\\rest\\ActiveController; <span class="class"><span class="keyword" data-redactor-class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">ActiveController</span> {</span> <span class="keyword">public</span> <span class="variable">$modelClass</span> = <span class="string">''app\\models\\User''</span>; } </code></pre><p><br><br>Далее изменяем конфигурацию компонента <code>urlManager</code> так, чтобы использовать красивые URL:</p><p><br><br></p><pre><code><span class="string" data-redactor-tag="span">''urlManager''</span> =&gt; [ <span class="string">''enablePrettyUrl''</span> =&gt; <span class="keyword">true</span>, <span class="string">''enableStrictParsing''</span> =&gt; <span class="keyword">true</span>, <span class="string">''showScriptName''</span> =&gt; <span class="keyword">false</span>, <span class="string">''rules''</span> =&gt; [ [<span class="string">''class''</span> =&gt; <span class="string">''yii\\rest\\UrlRule''</span>, <span class="string">''controller''</span> =&gt; <span class="string">''user''</span>], ], ] </code></pre><p><br><br>Готово! API, который был только что создан, поддерживает:</p><p><br><br></p><ul><li><code>GET /users</code>: список всех пользователей с постраничной разбивкой;</li><li><code>HEAD /users</code>: заголовки с информацией о списке пользователей;</li><li><code>POST /users</code>: создаёт нового пользователя;</li><li><code>GET /users/123</code>: информация о пользователе с id = 123;</li><li><code>HEAD /users/123</code>: заголовки с информацией о пользователе с id = 123;</li><li><code>PATCH /users/123</code> и <code>PUT /users/123</code>: обновляет информацию пользователя с id = 123;</li><li><code>DELETE /users/123</code>: удаляет пользователя с id = 123;</li><li><code>OPTIONS /users</code>: возвращает поддерживаемые глаголы HTTP для <code>/users</code>;</li><li><code>OPTIONS /users/123</code>: возвращает поддерживаемые глаголы HTTP для <code>/users/123</code>.</li></ul><p><br><br>Попробовать API можно при помощи <code>curl</code>:</p><p><br><br></p><pre><code>$ curl -i -H <span class="string" data-redactor-tag="span">"Accept:application/json"</span> <span class="string">"http://localhost/users"</span> HTTP/1.1 200 OK Date: Sun, 02 Mar 2014 05:31:43 GMT Server: Apache/2.2.26 (Unix) DAV/2 PHP/5.4.20 mod_ssl/2.2.26 OpenSSL/0.9.8y X-Powered-By: PHP/5.4.20 X-Pagination-Total-Count: 1000 X-Pagination-Page-Count: 50 X-Pagination-Current-Page: 1 X-Pagination-Per-Page: 20 Link: &lt;http://localhost/users?page=1&gt;; rel=self, &lt;http://localhost/users?page=2&gt;; rel=next, &lt;http://localhost/users?page=50&gt;; rel=last Transfer-Encoding: chunked Content-Type: application/json; charset=UTF-8 [ { <span class="string">"id"</span>: 1, ... }, { <span class="string">"id"</span>: 2, ... }, ... ] </code></pre><p><br><br></p><h5>Кеширование</h5><p><br><br>Как и в версии 1.1, в Yii 2.0 отличная поддержка кеширования как на стороне сервера (<a href="http://www.yiiframework.com/doc-2.0/guide-caching-fragment.html">фрагменты</a>, <a href="http://www.yiiframework.com/doc-2.0/guide-caching-data.html#query-caching">запросы</a>), так и на стороне клиента (<a href="http://www.yiiframework.com/doc-2.0/guide-caching-http.html">HTTP</a>). Есть драйверы для многих хранилищ, в том числе APC, Memcache, файлы, базы данных и т.д. </p><p><br><br></p><h5>Формы</h5><p><br><br>В Yii 1.1 можно быстро создать HTML формы с поддержкой как клиентской, так и серверной валидации. Во второй версии<a href="http://www.yiiframework.com/doc-2.0/guide-input-forms.html">сделать это ещё проще</a>. В примере ниже показано создание формы логина.</p><p><br><br>Сначала создаётся модель <code>LoginForm</code>, которая представляет собираемые из формы данные. В модели указываются правила валидации, которые будут автоматически использованы для генерации необходимого для валидации на клиенте JavaScript.</p><p><br><br></p><pre><code><span class="keyword" data-redactor-tag="span">use</span> yii\\base\\Model; <span class="class"><span class="keyword" data-redactor-class="keyword">class</span> <span class="title">LoginForm</span> <span class="keyword">extends</span> <span class="title">Model</span> {</span> <span class="keyword">public</span> <span class="variable">$username</span>; <span class="keyword">public</span> <span class="variable">$password</span>; <span class="comment">/** *<u> @return</u> array the validation rules. */</span> <span class="keyword">public</span> <span class="function"><span class="keyword" data-redactor-class="keyword">function</span> <span class="title">rules</span><span class="params">()</span> {</span> <span class="keyword">return</span> [ <span class="comment">// username and password are both required</span> [[<span class="string">''username''</span>, <span class="string">''password''</span>], <span class="string">''required''</span>], <span class="comment">// password is validated by validatePassword()</span> [<span class="string">''password''</span>, <span class="string">''validatePassword''</span>], ]; } <span class="comment">/** * Validates the password. * This method serves as the inline validation for password. */</span> <span class="keyword">public</span> <span class="function"><span class="keyword" data-redactor-class="keyword">function</span> <span class="title">validatePassword</span><span class="params">()</span> {</span> <span class="variable">$user</span> = User::findByUsername(<span class="variable">$this</span>-&gt;username); <span class="keyword">if</span> (!<span class="variable">$user</span> || !<span class="variable">$user</span>-&gt;validatePassword(<span class="variable">$this</span>-&gt;password)) { <span class="variable">$this</span>-&gt;addError(<span class="string">''password''</span>, <span class="string">''Incorrect username or password.''</span>); } } } </code></pre><p><br><br>Далее создаём view:</p><p><br><br></p><pre><code><span class="keyword" data-redactor-tag="span">use</span> yii\\helpers\\Html; <span class="keyword">use</span> yii\\widgets\\ActiveForm; <span class="preprocessor">&lt;?php</span> <span class="variable">$form</span> = ActiveForm::begin() <span class="preprocessor">?&gt;</span> &lt;?= <span class="variable">$form</span>-&gt;field(<span class="variable">$model</span>, <span class="string">''username''</span>) <span class="preprocessor">?&gt;</span> &lt;?= <span class="variable">$form</span>-&gt;field(<span class="variable">$model</span>, <span class="string">''password''</span>)-&gt;passwordInput() <span class="preprocessor">?&gt;</span> &lt;?= Html::submitButton(<span class="string">''Login''</span>) <span class="preprocessor">?&gt;</span> &lt;? ActiveForm::end() <span class="preprocessor">?&gt;</span> </code></pre><p><br><br></p><h5>Аутентификация и авторизация</h5><p><br><br>Как и в версии 1.1, в Yii 2.0 есть встроенная возможность аутентификации и авторизации пользователя. Поддерживаются вход, выход, <a href="http://www.yiiframework.com/doc-2.0/guide-security-authentication.html">аутентификация</a> на основе cookie и токена, <a href="http://www.yiiframework.com/doc-2.0/guide-security-authorization.html#access-control-filter">фильтр контроля доступа</a> и <a href="http://www.yiiframework.com/doc-2.0/guide-security-authorization.html#role-based-access-control-rbac">контроль доступа на основе ролей (RBAC)</a>. </p><p><br><br>Также есть возможность <a href="https://github.com/yiisoft/yii2-authclient">входа через внешние сервисы</a> по OpenID, OAuth1 и OAuth2. Есть и готовая поддержка популярных сервисов, таких как Facebook, GitHub, Google, Twitter, Вконтакте и Яндекс.</p><p><br><br></p><h5>Виджеты</h5><p><br><br>Для построения интерактивных пользовательских интерфейсов в состав фреймворка включено довольно много готовых элементов, называемых <a href="http://www.yiiframework.com/doc-2.0/guide-structure-widgets.html">виджетами</a>. Есть поддержка виджетов <a href="http://getbootstrap.com/">Bootstrap</a> и <a href="http://jqueryui.com/">jQuery UI</a>. Помимо этого, предоставляются такие часто используемые элементы как постраничная разбивка, грид, список и т.д. Все они делают разработку веб приложения действительно быстрым и приятным процессом. Например, используя следующий код можно получить полностью рабочий элемент jQuery UI для выбора даты на русском: </p><p><br><br></p><pre><code><span class="keyword" data-redactor-tag="span">use</span> yii\\jui\\DatePicker; <span class="keyword">echo</span> DatePicker::widget([ <span class="string">''name''</span> =&gt; <span class="string">''date''</span>, <span class="string">''language''</span> =&gt; <span class="string">''ru''</span>, <span class="string">''dateFormat''</span> =&gt; <span class="string">''yyyy-MM-dd''</span>, ]); </code></pre><p><br><br></p><h5>Хелперы</h5><p><br><br>Для упрощения частых задач в фреймворке имеются <a href="https://github.com/yiisoft/yii2/tree/master/framework/helpers">хелперы</a>. Например, в хелпере <code>Html</code> собраны методы для создания различных тегов HTML а хелпер <code>Url</code> позволяет создавать различные URL:</p><p><br><br></p><pre><code><span class="keyword" data-redactor-tag="span">use</span> yii\\helpers\\Html; <span class="keyword">use</span> yii\\helpers\\Url; <span class="comment">// создаёт список чекбоксов со странами</span> <span class="keyword">echo</span> Html::checkboxList(<span class="string">''country''</span>, <span class="string">''USA''</span>, <span class="variable">$countries</span>); <span class="comment">// выводит URL "/index?r=site/index&amp;src=ref1#name"</span> <span class="keyword">echo</span> Url::to([<span class="string">''site/index''</span>, <span class="string">''src''</span> =&gt; <span class="string">''ref1''</span>, <span class="string">''#''</span> =&gt; <span class="string">''name''</span>]); </code></pre><p><br><br></p><h5>Интернационализация</h5><p><br><br>Так как фреймворк используется по всему миру, мы позаботились о хорошей поддержке интернационализации. Поддерживаются<a href="http://www.yiiframework.com/doc-2.0/guide-tutorial-i18n.html#message-translation">перевод сообщений</a> и <a href="http://www.yiiframework.com/doc-2.0/guide-tutorial-i18n.html#views">перевод view</a>, основанные на локали <a href="http://www.yiiframework.com/doc-2.0/guide-tutorial-i18n.html#advanced-placeholder-formatting">множественные формы и форматирование данных</a> по <a href="http://icu-project.org/apiref/icu4c/classMessageFormat.html">стандарту ICU</a>. Например:</p><p><br><br></p><pre><code><span class="comment" data-redactor-tag="span">// переводим сообщение с форматированием даты</span> <span class="keyword">echo</span> \\Yii::t(<span class="string">''app''</span>, <span class="string">''Today is {0, date}''</span>, time()); <span class="comment">// переводим сообщение с множественными формами</span> <span class="keyword">echo</span> \\Yii::t(<span class="string">''app''</span>, <span class="string">''There {n, plural, =0{are no cats} =1{is one cat} other{are # cats}}!''</span>, [<span class="string">''n''</span> =&gt; <span class="number">0</span>]); </code></pre><p><br><br><br></p><h5>Шаблонизаторы</h5><p><br><br>По умолчанию Yii 2.0 использует в качестве языка шаблонов PHP, но также поддерживает <a href="http://twig.sensiolabs.org/">Twig</a> и <a href="http://www.smarty.net/">Smarty</a> через <a href="http://www.yiiframework.com/doc-2.0/guide-tutorial-template-engines.html">специальные расширения</a>. Возможно создавать и свои расширения для поддержки других шаблонизаторов.</p><p><br><br></p><h5>Тестирование</h5><p><br><br>Yii 2.0 официально поддерживает интеграцию с <a href="http://codeception.com/">Codeception</a> и <a href="https://github.com/fzaninotto/Faker">Faker</a>. В состав фреймворка включено решение для фикстур через миграции, что делает работу с данными для тестов более удобной.</p><p><br><br></p><h5>Шаблоны приложений</h5><p><br><br>Для того, чтобы сделать разработку ещё быстрее, в релиз вошли два шаблона приложений, каждый из которых представляет собой полностью рабочее веб приложение. <a href="http://www.yiiframework.com/doc-2.0/guide-start-installation.html#installing-via-composer">Шаблон basic</a> рекомендуется использовать как основу для небольших относительно простых веб проектов, таких как порталы и персональные сайты. <a href="http://www.yiiframework.com/doc-2.0/guide-tutorial-advanced-app.html">Шаблон advanced</a> больше подходит для крупных приложений с разделением на множество серверов, разрабатываемых большой командой.</p><p><br><br></p><h5>Расширения</h5><p><br><br>Несмотря на то, что Yii 2.0 предоставляет много полезных возможностей, в нём реализована система расширений, что делает его ещё более мощным. Расширениями называются распространяемые отдельно пакеты, специально предназначенные для использования в приложениях Yii. Множество возможностей Yii уже вынесены в расширения, например <a href="http://www.yiiframework.com/doc-2.0/guide-tutorial-mailing.html">отсылка почты</a> и<a href="https://github.com/yiisoft/yii2-bootstrap">Bootstrap</a>. На сайте Yii представлена большая <a href="http://www.yiiframework.com/extensions/">пользовательская библиотека</a>, насчитывающая на данный момент почти 1700 расширений. На <a href="https://packagist.org/search/?q=yii">packagist.org</a> можно найти более 1300 пакетов для Yii.</p><p><br><br></p><h4>Начало работы</h4><p><br><br>Для начала работы введите следующие команды:</p><p><br><br></p><pre><code><span class="comment" data-redactor-tag="span"># устанавливаем composer-asset-plugin глобально. Это нужно сделать один раз.</span> php composer.phar global require <span class="string">"fxp/composer-asset-plugin:1.0.0-beta2"</span> <span class="comment"># устанавливаем шаблон приложения basic</span> php composer.phar create-project yiisoft/yii2-app-basic basic 2.0.0 </code></pre><p><br><br>Команды выше сработают, если у вас уже установлен <a href="https://getcomposer.org/">Composer</a>. Если это не так, <a href="http://getcomposer.org/doc/00-intro.md#installation-nix">стоит его установить</a>.</p><p><br><br>Стоит отметить, что в процессе установки Composer может потребовать логин и пароль от GitHub для генерации токена, который позволяет преодолеть ограничения на количество запросов к API.</p><p><br><br>После выполнения команд выше вы можете начинать работать с веб приложением, доступным по URL<code>http://localhost/basic/web/index.php</code>.</p><p><br><br></p><h4>Обновляемся</h4><p><br><br>Если вы обновляетесь с предыдущих версий Yii 2.0 (альфа, бета или RC), <a href="https://github.com/yiisoft/yii2/blob/master/framework/UPGRADE.md">следуйте инструкциям</a>.</p><p><br><br>Обновление с версии 1.1 без переписывания кода приложения невозможно так как Yii 2.0 был полностью переписан и изменений синтаксиса очень много. Тем не менее, многие идеи сохранены, так что работать с 2.0, зная 1.1, будет проще. Большие изменения по сравнению с версией 1.1 подробно описаны в <a href="http://www.yiiframework.com/doc-2.0/guide-intro-upgrade-from-v1.html">документации</a>.</p><p><br><br></p><h4>Документация</h4><p><br><br>Для Yii 2.0 доступно <a href="http://www.yiiframework.com/doc-2.0/guide-README.html">полное руководство</a> и <a href="http://www.yiiframework.com/doc-2.0/index.html">документация по API</a>. Руководство переводится на <a href="https://github.com/yiisoft/yii2/tree/master/docs">множество языков</a>. Переводы будут доступны немного позже. По Yii 2.0 <a href="https://www.packtpub.com/web-development/web-application-development-yii-2-and-php">уже вышла одна книга</a> и пишутся ещё. Одна из книг будет написана известным техническим писателем <a href="http://www.larryullman.com/">Larry Ullman</a>, который помогает нам с полным руководством. Александр Макаров координирует и редактирует <a href="https://github.com/samdark/yii2-cookbook">книгу рецептов Yii 2.0</a>, похожую на тепло принятую книгу рецептов Yii 1.1.</p><p><br><br></p><h4>Спасибо</h4><p><br><br>Спасибо <a href="https://github.com/yiisoft/yii2/graphs/contributors">всем, кто принимал и принимает участие в разработке Yii</a>.<br>Ваша поддержка неоценима!</p>', '', '', 1, 1414734329, 1414734329);
INSERT INTO `articles` (`id`, `title`, `alias`, `category_id`, `author_id`, `snippet`, `content`, `image_url`, `preview_url`, `status_id`, `created_at`, `updated_at`) VALUES
(2, 'Yii 2.0: Динамическое добавление валидируемых полей формы через «пиджак»(pjax) для мульти-модельной', 'yii-20-dinamicheskoe-dobavlenie-validiruemih-poley-formi-cherez-«pidjak»pjax-dlya-muljti-modeljnoy', 1, NULL, '<p>Доброго времени суток, Хабр!<br>Не так давно передо мной встала задача разработки формы с возможностью динамического добавления полей, каждое поле являлось отдельной сущностью базы данных, то есть поле = запись в базе данных. Не смотря на то, что моя задача была не тривиальна, каждый вполне может столкнутся с чем-то подобным в той или иной мере. Например, с добавлением нового элемента прямо внутри GridView с последующим редактированием и сохранением.<br><br>Итак, начнем.</p>', '<p>Доброго времени суток, Хабр!</p><p>Не так давно передо мной встала задача разработки формы с возможностью динамического добавления полей, каждое поле являлось отдельной сущностью базы данных, то есть поле = запись в базе данных. Не смотря на то, что моя задача была не тривиальна, каждый вполне может столкнутся с чем-то подобным в той или иной мере. Например, с добавлением нового элемента прямо внутри GridView с последующим редактированием и сохранением.</p><p><br><br>Итак, начнем.<br><a name="habracut"></a></p><p><br><br></p><h4>Лирическое отступление</h4><br>Во время разработки данного решения я перерыл весь интернет и не нашел ни одного стоящего рецепта ни на англоязычных форумах, ни на SO ни на GitHub. Более того, к тому времени еще не была готова поддержка валидации динамических полей со стороны Yii. Более подробно <a href="http://habrahabr.ru/post/238447/">тут</a>. Да и сейчас, как мне кажется, она мне не подходит.<br>Само решение никак не претендует быть сверх-элегантным, по этому любой конструктив, критику, а также советы я с удовольствием выслушаю.<p><br><br></p><h4>Начальная настройка</h4><br>В первую очередь нам необходима модель, которая способна получить множество записей из одной или нескольких таблиц. В моем случае мне хватило отношения hasMany. Таким образом, массив моделей всех адресов мы можем получить следующим образом:<p><br><br></p><pre>&lt;code&gt;&lt;span class="variable"&gt;$addresses&lt;/span&gt; = &lt;span class="variable"&gt;$model&lt;/span&gt;-&gt;addresses; </pre><p><br><br>Ради примера можно представить что у нас есть view для пользователя, которая хочет отобразить список адресов с возможностью редактирования каждого, а также добавления нового адреса (сущности взяты с потолка).<br>Подготавливаем саму форму (будем считать что контроллер отдает только $model как модель пользователя):<br></p><pre>&lt;code&gt;&lt;span class="preprocessor"&gt;&lt;?php&lt;/span&gt; &lt;span class="keyword"&gt;use&lt;/span&gt; yii\\widgets\\ActiveForm; &lt;span class="keyword"&gt;use&lt;/span&gt; yii\\helpers\\Url; &lt;span class="keyword"&gt;use&lt;/span&gt; yii\\helpers\\Html; &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; &lt;span class="preprocessor"&gt;&lt;?php&lt;/span&gt; &lt;span class="variable"&gt;$form&lt;/span&gt; = ActiveForm::begin([ &lt;span class="string"&gt;''action''&lt;/span&gt; =&gt; Url::toRoute([&lt;span class="string"&gt;''addresses/update''&lt;/span&gt;, &lt;span class="string"&gt;''userId''&lt;/span&gt; =&gt; &lt;span class="variable"&gt;$model&lt;/span&gt;-&gt;id]), &lt;span class="string"&gt;''options''&lt;/span&gt; =&gt; [ &lt;span class="string"&gt;''data-pjax''&lt;/span&gt; =&gt; &lt;span class="string"&gt;''1''&lt;/span&gt; ], &lt;span class="string"&gt;''id''&lt;/span&gt; =&gt; &lt;span class="string"&gt;''adressesUpdateForm''&lt;/span&gt; ]); &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; &lt;span class="preprocessor"&gt;&lt;?php&lt;/span&gt; &lt;span class="keyword"&gt;foreach&lt;/span&gt; (&lt;span class="variable"&gt;$model&lt;/span&gt;-&gt;adresses &lt;span class="keyword"&gt;as&lt;/span&gt; &lt;span class="variable"&gt;$key&lt;/span&gt; =&gt; &lt;span class="variable"&gt;$address&lt;/span&gt;): &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; &lt;?= &lt;span class="variable"&gt;$form&lt;/span&gt;-&gt;field(&lt;span class="variable"&gt;$address&lt;/span&gt;, &lt;span class="string"&gt;"[$key]name"&lt;/span&gt;) &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; &lt;?= &lt;span class="variable"&gt;$form&lt;/span&gt;-&gt;field(&lt;span class="variable"&gt;$address&lt;/span&gt;, &lt;span class="string"&gt;"[$key]value"&lt;/span&gt;) &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; &lt;span class="preprocessor"&gt;&lt;?php&lt;/span&gt; &lt;span class="keyword"&gt;endforeach&lt;/span&gt; &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; &lt;?= Html::submitButton(&lt;span class="string"&gt;''Сохранить''&lt;/span&gt;, [&lt;span class="string"&gt;''class''&lt;/span&gt; =&gt; &lt;span class="string"&gt;''btn btn-primary''&lt;/span&gt;]) &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; &lt;span class="preprocessor"&gt;&lt;?php&lt;/span&gt; ActiveForm::end(); &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; </pre><p><br><br>Форма готова. В коде выше мы сперва подключаем необходимые классы — виджет ActiveForm и два хелпера.<br>Далее создаем ActiveForm со следующими параметрами:<br></p><ul><li>action — понятно, отсылает форму на определенный action контроллера addresses с параметром userId. (параметр нам пригодится позже)</li><li>массив options с единственным значением data-pjax, который активирует работу «пиджака» для конкретной формы (для ссылок активация не требуется, а вот формы надо указывать).</li><li>и id формы — если не задать id формы и при этом иметь на странице много виджетов или несколько ActiveForm, то после отработки сервером, pjax вернет нам форму с id w0, и идентификаторы могут пересечься с другими формами на странице, что нам совершенно не нужно.</li></ul><p><br><br>После создания формы запускаем цикл по адресам, я использовал геттер напрямую, и не стоит боятся, что при каждой итерации будет происходить запрос к базе, Yii сохраняет все relation запросы в приватном массиве relations. Далее выводим name и value из таблицы (или любые другие поля и более сложную разметку.)</p><p><br><br>Нетерпеливый читатель, наверное, спросит: «А как же кнопка добавления нового адреса?» — не спешите, все по порядку.</p><p><br><br>Основные заготовки есть, давайте подключим view файл как внутренний view файл к комплексному view пользователя.<br>Предположим, у нас есть страница профиля пользователя, а адреса отображаются сразу под ним, добавим view адресов и заодно «одеваем в пиджак»:<br></p><pre>&lt;code&gt;&lt;span class="preprocessor"&gt;&lt;?php&lt;/span&gt; &lt;span class="keyword"&gt;use&lt;/span&gt; yii\\widgets\\Pjax; &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; &lt;?= &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;render(&lt;span class="string"&gt;''_profile''&lt;/span&gt;, [&lt;span class="string"&gt;''model''&lt;/span&gt; =&gt; &lt;span class="variable"&gt;$model&lt;/span&gt;]) &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; &lt;span class="preprocessor"&gt;&lt;?php&lt;/span&gt; Pjax::begin([&lt;span class="string"&gt;''enablePushState''&lt;/span&gt; =&gt; &lt;span class="keyword"&gt;false&lt;/span&gt;]); &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; &lt;?= &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;render(&lt;span class="string"&gt;''_addresses''&lt;/span&gt;, [&lt;span class="string"&gt;''model''&lt;/span&gt; =&gt; &lt;span class="variable"&gt;$model&lt;/span&gt;]) &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; &lt;span class="preprocessor"&gt;&lt;?php&lt;/span&gt; Pjax::end(); &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; </pre><p><br><br>Обращаю Ваше внимание на параметр enablePushState, без него мы получим изменение адреса в адресной строке браузера. Нам это не нужно, потому что вся работа контроллера будет проходить через renderAjax, и полноценных view вместе с layout в этой части у нас не будет.</p><p><br><br></p><h4>Контроллер</h4><br>Я специально выделил контроллер отдельной главой.<br>Давайте сперва подумаем как он будет работать. С виду все просто. Получаем запрос на action update с информацией об id пользователя, затем обновляем модель и отдаем renderAjax(''_addresses'', [''model'' =&gt; $user]); В свою очередь, $user мы получаем через User::findOne($userId), который заботливо передали вместе с формой.<br>Однако на деле все немного сложнее:<ol><li>У нас не одна модель а несколько</li><li>Нам нужна пакетная загрузка</li><li>Нужна пакетная валидация</li></ol><p><br><br>Итак, поехали:<br></p><pre>&lt;code&gt;&lt;span class="preprocessor"&gt;&lt;?php&lt;/span&gt; &lt;span class="keyword"&gt;namespace&lt;/span&gt; backend\\controllers; &lt;span class="keyword"&gt;use&lt;/span&gt; Yii; &lt;span class="keyword"&gt;use&lt;/span&gt; common\\models\\User; &lt;span class="keyword"&gt;use&lt;/span&gt; common\\models\\Addresses; &lt;span class="keyword"&gt;use&lt;/span&gt; yii\\base\\Model; &lt;span class="keyword"&gt;use&lt;/span&gt; yii\\filters\\AccessControl; &lt;span class="keyword"&gt;use&lt;/span&gt; yii\\web\\Controller; &lt;span class="keyword"&gt;use&lt;/span&gt; yii\\web\\NotFoundHttpException; &lt;span class="comment"&gt;/** * Addresses controller */&lt;/span&gt; &lt;span class="class"&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="title"&gt;AddressesController&lt;/span&gt; &lt;span class="keyword"&gt;extends&lt;/span&gt; &lt;span class="title"&gt;Controller&lt;/span&gt; {&lt;/span&gt; } </pre><p><br><br>Так будет выглядеть класс контроллера без методов.</p><p><br><br>Добавляем пакетную загрузку как метод контроллера (можно обойтись и методом модели, но мне показалось так более правильно, к тому же в моем примере мне было необходимо сохранять не только модели, но и связь с таблицей user посредством link()):</p><p><br><br></p><pre>&lt;code&gt; &lt;span class="comment"&gt;/** * Update all addresses *&lt;u&gt; @param&lt;/u&gt; Model $items *&lt;u&gt; @return&lt;/u&gt; nothing */&lt;/span&gt; &lt;span class="keyword"&gt;protected&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="title"&gt;batchUpdate&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="variable"&gt;$items&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt; &lt;span class="keyword"&gt;if&lt;/span&gt; (Model::loadMultiple(&lt;span class="variable"&gt;$items&lt;/span&gt;, Yii::&lt;span class="variable"&gt;$app&lt;/span&gt;-&gt;request-&gt;post()) &amp;&amp; Model::validateMultiple(&lt;span class="variable"&gt;$items&lt;/span&gt;)) { &lt;span class="keyword"&gt;foreach&lt;/span&gt; (&lt;span class="variable"&gt;$items&lt;/span&gt; &lt;span class="keyword"&gt;as&lt;/span&gt; &lt;span class="variable"&gt;$key&lt;/span&gt; =&gt; &lt;span class="variable"&gt;$item&lt;/span&gt;) { &lt;span class="variable"&gt;$item&lt;/span&gt;-&gt;save(); } } } </pre><p><br><br>Можем улучшить метод возвращая true или количество обновленных записей в случае удачи и false в случае отсутствия данных для обновления. Мне это было не нужно.</p><p><br><br>Добавляем два метода для поиска моделей. Первый для User, второй для Address (я только сейчас подумал, можно было бы обернуть эти два метода в один):<br></p><pre>&lt;code&gt; &lt;span class="comment"&gt;/** * Finds the Addresses model based on its primary key value. * If the model is not found, a 404 HTTP exception will be thrown. *&lt;u&gt; @param&lt;/u&gt; integer $id *&lt;u&gt; @return&lt;/u&gt; Addresses the loaded model *&lt;u&gt; @throws&lt;/u&gt; NotFoundHttpException if the model cannot be found */&lt;/span&gt; &lt;span class="keyword"&gt;protected&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="title"&gt;findModel&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="variable"&gt;$id&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt; &lt;span class="keyword"&gt;if&lt;/span&gt; ((&lt;span class="variable"&gt;$model&lt;/span&gt; = Addresses::findOne(&lt;span class="variable"&gt;$id&lt;/span&gt;)) !== &lt;span class="keyword"&gt;null&lt;/span&gt;) { &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="variable"&gt;$model&lt;/span&gt;; } &lt;span class="keyword"&gt;else&lt;/span&gt; { &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; NotFoundHttpException(&lt;span class="string"&gt;''The requested page does not exist.''&lt;/span&gt;); } } &lt;span class="comment"&gt;/** * Finds the User model based on its primary key value. * If the model is not found, a 404 HTTP exception will be thrown. *&lt;u&gt; @param&lt;/u&gt; integer $id *&lt;u&gt; @return&lt;/u&gt; User the loaded model *&lt;u&gt; @throws&lt;/u&gt; NotFoundHttpException if the model cannot be found */&lt;/span&gt; &lt;span class="keyword"&gt;protected&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword" data-redactor-class="keyword"&gt;function&lt;/span&gt; &lt;span class="title"&gt;findUser&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="variable" data-redactor-class="variable"&gt;$id&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt; &lt;span class="keyword"&gt;if&lt;/span&gt; ((&lt;span class="variable"&gt;$model&lt;/span&gt; = User::findOne(&lt;span class="variable"&gt;$id&lt;/span&gt;)) !== &lt;span class="keyword"&gt;null&lt;/span&gt;) { &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="variable"&gt;$model&lt;/span&gt;; } &lt;span class="keyword"&gt;else&lt;/span&gt; { &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; NotFoundHttpException(&lt;span class="string"&gt;''The requested page does not exist.''&lt;/span&gt;); } } </pre><p><br><br>И, наконец, пишем наш action:</p><p><br><br></p><pre>&lt;code&gt; &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="title"&gt;actionUpdate&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="variable"&gt;$userId&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt; &lt;span class="variable"&gt;$user&lt;/span&gt; = &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;findUser(&lt;span class="variable"&gt;$userId&lt;/span&gt;); &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;batchUpdate(&lt;span class="variable"&gt;$user&lt;/span&gt;-&gt;addresses); &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;renderAjax(&lt;span class="string"&gt;''_addresses''&lt;/span&gt;, [&lt;span class="string"&gt;''model''&lt;/span&gt; =&gt; &lt;span class="variable"&gt;$user&lt;/span&gt;]); } </pre><p><br><br>Не забудьте добавить access control.</p><p><br><br></p><pre>&lt;code&gt; &lt;span class="comment"&gt;/** *&lt;u&gt; @inheritdoc&lt;/u&gt; */&lt;/span&gt; &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="title"&gt;behaviors&lt;/span&gt;&lt;span class="params"&gt;()&lt;/span&gt; {&lt;/span&gt; &lt;span class="keyword"&gt;return&lt;/span&gt; [ &lt;span class="string"&gt;''access''&lt;/span&gt; =&gt; [ &lt;span class="string"&gt;''class''&lt;/span&gt; =&gt; AccessControl::className(), &lt;span class="string"&gt;''rules''&lt;/span&gt; =&gt; [ [ &lt;span class="string"&gt;''actions''&lt;/span&gt; =&gt; [&lt;span class="string"&gt;''create''&lt;/span&gt;, &lt;span class="string"&gt;''update''&lt;/span&gt;, &lt;span class="string"&gt;''delete''&lt;/span&gt;], &lt;span class="string"&gt;''allow''&lt;/span&gt; =&gt; &lt;span class="keyword"&gt;true&lt;/span&gt;, &lt;span class="string"&gt;''roles''&lt;/span&gt; =&gt; [&lt;span class="string"&gt;''@''&lt;/span&gt;], ], ], ] ]; } </pre><br>В методе выше я поспешил и сразу показал методы create и delete. Их еще нет, но заранее добавить в access control два метода лучше, чем потом ловить exception о запрещенном доступе.<p><br><br>Ну что, теперь у нас есть отличная форма, которая обновляет посредством pjax данные по всем адресам. В обычном случае мы бы могли добавить в форму кнопку «добавить» и «удалить» и отсылать запрос на определенный action, а в случае с «добавить» — еще и отдельную view.</p><p><br><br></p><h4>Динамические поля с валидацией</h4><br>Вот и добрались до самого главного.<br>Простое добавление новой сущности сводится к следующим действиям:<ul><li>Добавляем во view кнопку которая ведет на action — addresses/create</li><li>Добавляем функцию создания fake записи в базе данных.</li><li>Добавляем action</li><li>Отображаем view через ajax.</li></ul><p><br><br>Создание fake записи делаем через метод модели addOne()<br></p><pre>&lt;code&gt; &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="title"&gt;addOne&lt;/span&gt;&lt;span class="params"&gt;()&lt;/span&gt; {&lt;/span&gt; &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;name = &lt;span class="keyword"&gt;self&lt;/span&gt;::DEFAULT_NAME; &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;value = &lt;span class="keyword"&gt;self&lt;/span&gt;::DEFAULT_VALUE; } </pre><br>Не забудьте создать константы в классе модели.<p><br><br>Action в контроллере будет выглядеть так:<br></p><pre>&lt;code&gt; &lt;span class="comment"&gt;/** * action call by AJAX to create new fake address *&lt;u&gt; @param&lt;/u&gt; integer $userId *&lt;u&gt; @return&lt;/u&gt; mixed */&lt;/span&gt; &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="title"&gt;actionCreate&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="variable"&gt;$userId&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt; &lt;span class="variable"&gt;$user&lt;/span&gt; = &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;findUser(&lt;span class="variable"&gt;$userId&lt;/span&gt;); &lt;span class="variable"&gt;$model&lt;/span&gt; = &lt;span class="keyword"&gt;new&lt;/span&gt; Addresses; &lt;span class="variable"&gt;$model&lt;/span&gt;-&gt;addOne(); &lt;span class="variable"&gt;$user&lt;/span&gt;-&gt;link(&lt;span class="string"&gt;''addresses''&lt;/span&gt;, &lt;span class="variable"&gt;$model&lt;/span&gt;); &lt;span class="comment"&gt;// link сохраняет в базу данных без валидации, будьте осторожны&lt;/span&gt; &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;renderAjax(&lt;span class="string"&gt;''_addresses''&lt;/span&gt;, [&lt;span class="string"&gt;''model''&lt;/span&gt; =&gt; &lt;span class="variable"&gt;$user&lt;/span&gt;]); } </pre><p><br><br>Кнопка добавления записи во view внутри pjax, но вне цикла:<br></p><pre>&lt;code&gt; &lt;?= Html::a(&lt;span class="string"&gt;''Добавить адрес''&lt;/span&gt;, Url::toRoute([&lt;span class="string"&gt;''addresses/create''&lt;/span&gt;, &lt;span class="string"&gt;''userId''&lt;/span&gt; =&gt; &lt;span class="variable"&gt;$model&lt;/span&gt;-&gt;id]), [ &lt;span class="string"&gt;''class''&lt;/span&gt; =&gt; &lt;span class="string"&gt;''btn btn-success''&lt;/span&gt;, ]) &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; </pre><p><br><br>Собственно, все. Теперь при нажатии на кнопку «Добавить адрес» в базе данных будет создаваться fake запись с начальными данными, а view будет рендериться заново вместе с новыми правилами валидации.<br>Можно улучшить эту часть кода добавлением правила валидации о том, что значения не должны быть эквивалентны дефолтным. Так как метод link сохраняет без валидации, это вполне реализуемо, а для остальных могу посоветовать save(false) — false отключает валидацию при сохранении модели.</p><p><br><br>Давайте сделаем тоже самое для кнопки удалить, в итоге наша view будет выглядеть внутри цикла вот так:<br></p><pre>&lt;code&gt; &lt;?= &lt;span class="variable"&gt;$form&lt;/span&gt;-&gt;field(&lt;span class="variable"&gt;$address&lt;/span&gt;, &lt;span class="string"&gt;"[$key]name"&lt;/span&gt;) &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; &lt;?= &lt;span class="variable"&gt;$form&lt;/span&gt;-&gt;field(&lt;span class="variable"&gt;$address&lt;/span&gt;, &lt;span class="string"&gt;"[$key]value"&lt;/span&gt;) &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; &lt;?= Html::a(&lt;span class="string"&gt;''Удалить''&lt;/span&gt;, Url::toRoute([&lt;span class="string"&gt;''addresses/delete''&lt;/span&gt;, &lt;span class="string"&gt;''id''&lt;/span&gt; =&gt; &lt;span class="variable"&gt;$address&lt;/span&gt;-&gt;id]), [ &lt;span class="string"&gt;''class''&lt;/span&gt; =&gt; &lt;span class="string"&gt;''btn btn-danger''&lt;/span&gt;, ]) &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; </pre><p><br><br>и action контроллера:<br></p><pre>&lt;code&gt; &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="title"&gt;actionDelete&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="variable"&gt;$id&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt; &lt;span class="variable"&gt;$model&lt;/span&gt; = &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;findModel(&lt;span class="variable"&gt;$id&lt;/span&gt;); &lt;span class="variable"&gt;$user&lt;/span&gt; = &lt;span class="variable"&gt;$model&lt;/span&gt;-&gt;user; &lt;span class="variable"&gt;$model&lt;/span&gt;-&gt;delete(); &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;renderAjax(&lt;span class="string"&gt;''_addresses''&lt;/span&gt;, [&lt;span class="string"&gt;''model''&lt;/span&gt; =&gt; &lt;span class="variable"&gt;$user&lt;/span&gt;]); } </pre><p><br><br></p><h4>А как же измененные значения и UX?</h4><br>Все верно. Для стандартной ситуации описанного выше функционала хватит, однако пользователь привык к тому, что при динамическом добавлении поля ему не нужно заботиться о сохранении данных перед этим. В итоге пользователь может заполнить 5 полей, поймет что ему не хватило, добавит 6-ое… и все. Прощайте 5 минут жизни для пользователя, прощай пользователь для нашего ресурса.<p><br><br>Единственное, что я смог придумать в этой ситуации, это сохранять форму каждый раз, когда пользователь жмет на кнопку (не важно, на какую).<br>Что мне для этого понадобилось:<br></p><ul><li>Добавить batchUpdate в action''ы create и delete прямо перед return $this-&gt;renderAjax(...)</li><li>Написать простенький скрипт, который меняет action формы в зависимости от нажатой кнопки, а потом сабмитит ее.</li></ul><p><br><br>Сперва скрипит:<br></p><pre>&lt;code&gt;$(&lt;span class="keyword"&gt;function&lt;/span&gt;(){ $(document).on(&lt;span class="string"&gt;''click''&lt;/span&gt;, &lt;span class="string"&gt;''[data-toggle=reroute]''&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(e) { e.preventDefault(); &lt;span class="keyword"&gt;var&lt;/span&gt; {replace57}lt;span class="keyword"&gt;this&lt;/span&gt; = $(&lt;span class="keyword"&gt;this&lt;/span&gt;); &lt;span class="keyword"&gt;var&lt;/span&gt; data = {replace57}lt;span class="keyword"&gt;this&lt;/span&gt;.data(); &lt;span class="keyword"&gt;var&lt;/span&gt; action = data.action; &lt;span class="keyword"&gt;var&lt;/span&gt; $form = {replace57}lt;span class="keyword"&gt;this&lt;/span&gt;.closest(&lt;span class="string"&gt;''form''&lt;/span&gt;); &lt;span class="keyword"&gt;if&lt;/span&gt; ($form &amp;&amp; action) { $form.attr(&lt;span class="string"&gt;''action''&lt;/span&gt;, action).submit(); } &lt;span class="keyword"&gt;else&lt;/span&gt; { alert(&lt;span class="string"&gt;''Ошибка! Пожалуйста, сообщите администрации.''&lt;/span&gt;); } }); }); </pre><br>Простой сниппет кода, который занял у меня от силы 1 минуту. Ссылка или элемент с атрибутом data-toggle=reroute попадает в обработчик, и ближайшая к нему форма (среди родителей, естественно) меняет свой action на тот, что хранится в data-action, а после этого сабмитится. В случае неверной настройки обработчика со стороны html шаблона вылетает alert.<p><br><br>Осталось изменить наши кнопки в представлении следующим образом:<br></p><pre>&lt;code&gt; &lt;?= Html::a(&lt;span class="string"&gt;''Добавить адрес''&lt;/span&gt;, &lt;span class="keyword"&gt;null&lt;/span&gt;, [ &lt;span class="string"&gt;''class''&lt;/span&gt; =&gt; &lt;span class="string"&gt;''btn btn-success''&lt;/span&gt;, &lt;span class="string"&gt;''data''&lt;/span&gt; =&gt; [ &lt;span class="string"&gt;''toggle''&lt;/span&gt; =&gt; &lt;span class="string"&gt;''reroute''&lt;/span&gt;, &lt;span class="string"&gt;''action''&lt;/span&gt; =&gt; Url::toRoute([&lt;span class="string"&gt;''addresses/create''&lt;/span&gt;, &lt;span class="string"&gt;''userId''&lt;/span&gt; =&gt; &lt;span class="variable"&gt;$model&lt;/span&gt;-&gt;id]) ] ]) &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; &lt;?= Html::a(&lt;span class="string"&gt;''Удалить''&lt;/span&gt;, &lt;span class="keyword"&gt;null&lt;/span&gt;, [ &lt;span class="string"&gt;''class''&lt;/span&gt; =&gt; &lt;span class="string"&gt;''btn btn-danger''&lt;/span&gt;, &lt;span class="string"&gt;''data''&lt;/span&gt; =&gt; [ &lt;span class="string"&gt;''toggle''&lt;/span&gt; =&gt; &lt;span class="string"&gt;''reroute''&lt;/span&gt;, &lt;span class="string"&gt;''action''&lt;/span&gt; =&gt; Url::toRoute([&lt;span class="string"&gt;''addresses/delete''&lt;/span&gt;, &lt;span class="string"&gt;''id''&lt;/span&gt; =&gt; &lt;span class="variable"&gt;$variable&lt;/span&gt;-&gt;id]) ] ]) &lt;span class="preprocessor"&gt;?&gt;&lt;/span&gt; </pre><p><br><br></p><h4>Что можно улучшить</h4><br>Как всегда есть к чему стремиться.<ul><li>Для начала можно оптимизировать пакетную загрузку (если она, конечно, не оптимизирована на уровне ядра, чему я не нашел подтверждение) таким образом, что не измененные записи не будут сохранятся в базу данных. Для этого достаточно сравнить oldAttributes и attributes конкретной модели в методе модели beforeSave(). В противном случае, если такая проверка не происходит на уровне фреймворка, sql сервер будет удивлен повторным записям с одними и теми же значениями.</li><li>Далее можно обернуть методы поиска модели в контроллере в один единственный метод findModel($classname, $params)</li><li>И, как я уже говорил, создать правило валидации на несоответствие полей модели ее константам с дефолтными значениями.</li></ul><p><br><br>Буду рад, если кто-то подскажет улучшения или исправления данного рецепта. Всем добра!</p><p><br><br></p><p><span class="spoiler_title">Полезные ссылки</span></p>', '', '', 1, 1414734410, 1414829848);
INSERT INTO `articles` (`id`, `title`, `alias`, `category_id`, `author_id`, `snippet`, `content`, `image_url`, `preview_url`, `status_id`, `created_at`, `updated_at`) VALUES
(3, 'Простой экспорт в Excel XLSX', 'prostoy-eksport-v-excel-xlsx', 1, NULL, '<p>В продолжение темы, начатой в <a href="http://habrahabr.ru/post/235973/">предыдущей статье</a>, хочу поделиться своим опытом экспорта данных, в частности, в формате XLSX.</p><p><br>Итак, кому интересно, как заполнить <a href="http://msdn.microsoft.com/en-us/library/aa338205(v=office.12).aspx">XLSX</a> без больших и сложных библиотек, прошу под кат.</p>', '<p>В продолжение темы, начатой в <a href="http://habrahabr.ru/post/235973/">предыдущей статье</a>, хочу поделиться своим опытом экспорта данных, в частности, в формате XLSX.</p><p>Итак, кому интересно, как заполнить <a href="http://msdn.microsoft.com/en-us/library/aa338205(v=office.12).aspx">XLSX</a> без больших и сложных библиотек, прошу под кат.<br><a name="habracut"></a><br>Недавно передо мной возникла задача экспортировать непредсказуемый по размеру объем табличных данных в формате XLSX. Как любой здравомыслящий программист, первым делом полез искать готовые решения.<br>Почти сразу наткнулся на библиотеку <a href="https://github.com/PHPOffice/PHPExcel">PHPExcel</a>. Мощное решение, с кучей разных функций и возможностей. Порывшись еще немного нашел отзывы программистов о ней. В частности, на форумах встречаются жалобы на скорость работы и отказ работать с большим объемом данных. Отметил библиотеку как один из вариантов решения и начал искать дальше.<br>Находил еще несколько библиотек для работы с XLSX, но все они были или забытыми, т.к. не обновлялись по 2-3 года, или обязательно тянули за собой сторонние библиотеки, или использовали <a href="https://ru.wikipedia.org/wiki/Document_Object_Model">DOM</a> для работы с файлами, что мне не очень нравилось. Каждый раз, натыкаясь на очередную библиотеку и изучая механизмы ее работы, ловил себя на мысли, что все это «из пушки по воробьям». Не нужно мне такое сложное решение!<br>Признаюсь честно, изучив поверхностно каждое из найденных решений, не стал ставить и тестировать ни одного. Мне нужно было более простое и надежное, как танк, решение.</p><p><br><br></p><h4>Задача</h4><br>В общем, раз не нашел ничего подходящего, значит надо сформулировать технические требования к тому, что нужно. Требования, как и следовало ожидать, оказались тривиальными:<ul><li>Оформить экспортирующий механизм в виде автономного класса</li><li>Реализовать в классе набор функций для записи значений ячеек и ряда</li><li>Возможность работы с неограниченным объемом данных</li><li>Распаковка и упаковка XLSX.</li></ul><br>Отдельно остановлюсь только на последнем пункте. Как известно, XLSX представляет собой обычный <a href="https://ru.wikipedia.org/wiki/ZIP">zip</a>-архив, который можно распаковать и увидеть, что он состоит из нескольких файлов и каталогов. Обратным образом его можно упаковать и переименовать в XLSX. Если все изменения правильные, то Microsoft Excel откроет файл без проблем.<p><br><br></p><h4>Реализация</h4><br>Изначально очень хотел создавать все файлы, из которых состоит XLSX, кодом, но, к счастью, быстро понял бессмысленность своей идеи. И родилось иное, более правильно и простое решение. Надо с помощью Microsoft Excel создать файл XLSX в таком виде, в каком он нужен в итоге, но без данных, иными словами — шаблон, а потом, с помощью кода, только добавить данные! <br>В таком случае, класс должен будет распаковывать шаблон в отдельный каталог, вносить изменения в /xl/worksheets/sheet1.xml и упаковывать содержимое каталога обратно в XLSX.<p><br><br>В объявлении класса присутствуют публичные переменные:<br><i>$templateFile</i> – имя файла шаблона<br><i>$exportDir</i> – папка, в которую будет распакован шаблон, разумеется с необходимыми правами доступа.</p><p><br><br>Конструктор класса принимает имя будущего файла, количество колонок и рядов. Потом проверяет, что имя файла корректно, папка для распаковки шаблона существует и формирует полное имя конечной папки для распаковки шаблона.<br>После создания класса можно распаковать шаблон и открыть на запись sheet1.xml. На самом деле я не просто дописываю в файл, а полностью его перезаписываю. Однажды взяв из него начальную строку, вношу в нее изменение в тэге dimension, который отражает размер экспортируемого диапазона, и записываю в файл.</p><p><br><br></p><pre>&lt;code&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="title"&gt;openWriter&lt;/span&gt;&lt;span class="params"&gt;()&lt;/span&gt; {&lt;/span&gt; &lt;span class="keyword"&gt;if&lt;/span&gt; (is_dir(&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;baseDir)) CFileHelper::removeDirectory(&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;baseDir); mkdir(&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;baseDir); exec(&lt;span class="string"&gt;"unzip $this-&gt;templateFullFilename -d \\"$this-&gt;baseDir\\""&lt;/span&gt;); &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;workSheetHandler = fopen(&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;baseDir.&lt;span class="string"&gt;''/xl/worksheets/sheet1.xml''&lt;/span&gt;, &lt;span class="string"&gt;''w+''&lt;/span&gt;); fwrite(&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;workSheetHandler, &lt;span class="string"&gt;''&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;worksheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships"&gt;&lt;dimension ref="A1:''&lt;/span&gt;.chr(&lt;span class="number"&gt;64&lt;/span&gt;+&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;colCount).&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;rowCount.&lt;span class="string"&gt;''"/&gt;&lt;sheetData&gt;''&lt;/span&gt;); } </pre><p><br><br>Обеспечить скорость работы и возможность работы с большим объемом данных позволяют функции resetRow и flushRow. Они отвечают за очистку текущего ряда в памяти и запись текущего ряда на диск.<br>А вот сохранение значений ячеек с разными типами оказалось не такой простой задачей.</p><p><br><br></p><h5>Запись строки</h5><br>Казалось бы, что сложного записать строковое значение в файл. Однако, в XLSX все не так просто. Все строки внутри XLSX хранятся в отдельном файле /xl/sharedStrings.xml. В ячейки записываются не строковые значения, а их порядковые номера — индексы. Разумное решение с точки зрения сокращения размера файла.<p><br><br>Но такое решение неудобно с точки зрения программного заполнения шаблона. Если выполнять указанное требование, то мне бы пришлось выполнять отдельный проход по всем строковым значениям в массиве данных, исключать повторяющиеся, сохранять их в sharedStrings.xml, проиндексировать и вместо значений в исходном массиве вписать их индексы. Медленно и неудобно.</p><p><br><br>Оказывается, можно обойти требование и сохранять строковые значения ячеек прямо в ячейках. Но в этом случае формат записи будет иной:</p><p><br><br></p><pre>&lt;code&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="title"&gt;appendCellString&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="variable" data-redactor-class="variable"&gt;$value&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt; &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;curCel++; &lt;span class="keyword"&gt;if&lt;/span&gt; (!&lt;span class="keyword"&gt;empty&lt;/span&gt;(&lt;span class="variable"&gt;$value&lt;/span&gt;)) { &lt;span class="variable"&gt;$value&lt;/span&gt; = htmlspecialchars(&lt;span class="variable"&gt;$value&lt;/span&gt;, ENT_QUOTES, &lt;span class="string"&gt;''UTF-8''&lt;/span&gt;); &lt;span class="variable"&gt;$value&lt;/span&gt; = preg_replace( &lt;span class="string"&gt;''/[\\x00-\\x13]/''&lt;/span&gt;, &lt;span class="string"&gt;''''&lt;/span&gt;, &lt;span class="variable"&gt;$value&lt;/span&gt; ); &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;currentRow[] = &lt;span class="string"&gt;''&lt;c r="''&lt;/span&gt;.chr(&lt;span class="number"&gt;64&lt;/span&gt;+&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;curCel).&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;numRows.&lt;span class="string"&gt;''" t="inlineStr"''&lt;/span&gt;.(&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;isBold ? &lt;span class="string"&gt;'' s="7"''&lt;/span&gt; : &lt;span class="string"&gt;''''&lt;/span&gt;).&lt;span class="string"&gt;''&gt;&lt;is&gt;&lt;t&gt;''&lt;/span&gt;.&lt;span class="variable"&gt;$value&lt;/span&gt;.&lt;span class="string"&gt;''&lt;/t&gt;&lt;/is&gt;&lt;/c&gt;''&lt;/span&gt;; &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;numStrings++; } } </pre><p><br><br></p><h5>Запись числа</h5><br>Никаких сложностей с записью целых или дробных чисел не возникло. Все просто:<p><br><br></p><pre>&lt;code&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="title"&gt;appendCellNum&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="variable" data-redactor-class="variable"&gt;$value&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt; &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;curCel++; &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;currentRow[] = &lt;span class="string"&gt;''&lt;c r="''&lt;/span&gt;.chr(&lt;span class="number"&gt;64&lt;/span&gt;+&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;curCel).&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;numRows.&lt;span class="string"&gt;''"&gt;&lt;v&gt;''&lt;/span&gt;.&lt;span class="variable"&gt;$value&lt;/span&gt;.&lt;span class="string"&gt;''&lt;/v&gt;&lt;/c&gt;''&lt;/span&gt;; } </pre><p><br><br></p><h5>Запись даты и времени</h5><br>Дата и время хранятся в виде количества секунд прошедших с 01.01.1970 поделенных на количество секунд в сутках. Причем, в вычислении допущена ошибка с определением високосного года. В общем, не вдаваясь в подробности, которые несложно найти в сети, чтобы корректно вычислять дату пришлось объявить в классе две константы:<br><i>ZERO_TIMESTAMP</i> – смещение даты в формате Excel от UNIX_TIMESTAMP<br><i>SEC_IN_DAY</i> – секунд в сутках.<br>После вычисления значения даты и времени, целая часть дроби – это дата, дробная часть – время:<p><br><br></p><pre>&lt;code&gt;&lt;span class="keyword"&gt;const&lt;/span&gt; ZERO_TIMESTAMP = &lt;span class="number"&gt;2209161600&lt;/span&gt;; &lt;span class="keyword"&gt;const&lt;/span&gt; SEC_IN_DAY = &lt;span class="number"&gt;86400&lt;/span&gt;; &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="title"&gt;appendCellDateTime&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="variable" data-redactor-class="variable"&gt;$value&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt; &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;curCel++; &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;empty&lt;/span&gt;(&lt;span class="variable"&gt;$value&lt;/span&gt;)) &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;appendCellString(&lt;span class="string"&gt;''''&lt;/span&gt;); &lt;span class="keyword"&gt;else&lt;/span&gt; { &lt;span class="variable"&gt;$dt&lt;/span&gt; = &lt;span class="keyword"&gt;new&lt;/span&gt; DateTime(&lt;span class="variable"&gt;$value&lt;/span&gt;); &lt;span class="variable"&gt;$ts&lt;/span&gt; = &lt;span class="variable"&gt;$dt&lt;/span&gt;-&gt;getTimestamp() + &lt;span class="keyword"&gt;self&lt;/span&gt;::ZERO_TIMESTAMP; &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;currentRow[] = &lt;span class="string"&gt;''&lt;c r="''&lt;/span&gt;.chr(&lt;span class="number"&gt;64&lt;/span&gt;+&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;curCel).&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;numRows.&lt;span class="string"&gt;''" s="1"&gt;&lt;v&gt;''&lt;/span&gt;.&lt;span class="variable"&gt;$ts&lt;/span&gt;/&lt;span class="keyword"&gt;self&lt;/span&gt;::SEC_IN_DAY.&lt;span class="string"&gt;''&lt;/v&gt;&lt;/c&gt;''&lt;/span&gt;; } } </pre><br>После записи всех данных остается закрыть рабочий лист и рабочую книгу.<p><br><br></p><h4>Применение</h4><br>Как и раньше, использование описанного класса основано на экспорте данных с помощью провайдера <a href="http://www.yiiframework.com/doc/api/1.1/CArrayDataProvider">CArrayDataProvider</a>. Предполагая, что объем экспортируемых данных может оказаться очень большим, применен специальный итератор<a href="http://www.yiiframework.com/doc/api/1.1/CDataProviderIterator">CDataProviderIterator</a>, который перебирает возвращаемые данные по 100 записей (можно указать иное число записей).<p><br><br></p><pre>&lt;code&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="title"&gt;exportXLSX&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="variable" data-redactor-class="variable"&gt;$organization&lt;/span&gt;, &lt;span class="variable"&gt;$user&lt;/span&gt;, &amp;&lt;span class="variable"&gt;$filename&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt; &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;_provider = &lt;span class="keyword"&gt;new&lt;/span&gt; CArrayDataProvider(&lt;span class="comment"&gt;/*query*/&lt;/span&gt;); Yii::import(&lt;span class="string"&gt;''ext.AlxdExportXLSX.AlxdExportXLSX''&lt;/span&gt;); &lt;span class="variable"&gt;$export&lt;/span&gt; = &lt;span class="keyword"&gt;new&lt;/span&gt; AlxdExportXLSX(&lt;span class="variable"&gt;$filename&lt;/span&gt;, count(&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;_attributes), &lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;_provider-&gt;getTotalItemCount() + &lt;span class="number"&gt;1&lt;/span&gt;); &lt;span class="variable"&gt;$export&lt;/span&gt;-&gt;openWriter(); &lt;span class="variable"&gt;$export&lt;/span&gt;-&gt;resetRow(); &lt;span class="variable"&gt;$export&lt;/span&gt;-&gt;openRow(&lt;span class="keyword"&gt;true&lt;/span&gt;); &lt;span class="keyword"&gt;foreach&lt;/span&gt; (&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;_attributes &lt;span class="keyword"&gt;as&lt;/span&gt; &lt;span class="variable"&gt;$code&lt;/span&gt; =&gt; &lt;span class="variable"&gt;$format&lt;/span&gt;) &lt;span class="variable"&gt;$export&lt;/span&gt;-&gt;appendCellString(&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;_objectref-&gt;getAttributeLabel(&lt;span class="variable"&gt;$code&lt;/span&gt;)); &lt;span class="variable"&gt;$export&lt;/span&gt;-&gt;closeRow(); &lt;span class="variable"&gt;$export&lt;/span&gt;-&gt;flushRow(); &lt;span class="variable"&gt;$rows&lt;/span&gt; = &lt;span class="keyword"&gt;new&lt;/span&gt; CDataProviderIterator(&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;_provider, &lt;span class="number"&gt;100&lt;/span&gt;); &lt;span class="keyword"&gt;foreach&lt;/span&gt; (&lt;span class="variable"&gt;$rows&lt;/span&gt; &lt;span class="keyword"&gt;as&lt;/span&gt; &lt;span class="variable"&gt;$row&lt;/span&gt;) { &lt;span class="variable"&gt;$export&lt;/span&gt;-&gt;resetRow(); &lt;span class="variable"&gt;$export&lt;/span&gt;-&gt;openRow(); &lt;span class="keyword"&gt;foreach&lt;/span&gt; (&lt;span class="variable"&gt;$this&lt;/span&gt;-&gt;_attributes &lt;span class="keyword"&gt;as&lt;/span&gt; &lt;span class="variable"&gt;$code&lt;/span&gt; =&gt; &lt;span class="variable"&gt;$format&lt;/span&gt;) { &lt;span class="keyword"&gt;switch&lt;/span&gt; (&lt;span class="variable"&gt;$format&lt;/span&gt;-&gt;type) { &lt;span class="keyword"&gt;case&lt;/span&gt; &lt;span class="string"&gt;''Num''&lt;/span&gt;: &lt;span class="variable"&gt;$export&lt;/span&gt;-&gt;appendCellNum(&lt;span class="variable"&gt;$row&lt;/span&gt;[&lt;span class="variable"&gt;$code&lt;/span&gt;]); &lt;span class="comment"&gt;/*other types*/&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt;: &lt;span class="variable"&gt;$export&lt;/span&gt;-&gt;appendCellString(&lt;span class="string"&gt;''''&lt;/span&gt;); } } &lt;span class="variable"&gt;$export&lt;/span&gt;-&gt;closeRow(); &lt;span class="variable"&gt;$export&lt;/span&gt;-&gt;flushRow(); } &lt;span class="variable"&gt;$export&lt;/span&gt;-&gt;closeWriter(); &lt;span class="variable"&gt;$export&lt;/span&gt;-&gt;zip(); &lt;span class="variable"&gt;$filename&lt;/span&gt; = &lt;span class="variable"&gt;$export&lt;/span&gt;-&gt;getZipFullFileName(); } </pre><br>Кому интересно, может получить исходный код моего класса <a href="https://github.com/Alxdhere/AlxdExportXLSX">AlxdExportXLSX</a> совершенно безвозмездно.', '', '', 1, 1414734500, 1414734518),
(4, 'Простой экспорт в Excel XML', 'prostoy-eksport-v-excel-xml', 1, NULL, '<p>При разработке системы электронного документооборота потребовалось реализовать функции для экспорта данных в популярных форматах. В частности, в формате Microsoft Excel. Требования к экспорту были довольно простые – экспортировать данные с минимумом форматирования, т.е. никаких объединенных ячеек, игр со шрифтами и т.п. Форматы экспорта XLSX и Excel XML.</p><p><br>В данном случае расскажу про <a href="http://technet.microsoft.com/ru-ru/magazine/2006.01.blogtales(en-us).aspx">Excel XML</a>.</p>', '<p>При разработке системы электронного документооборота потребовалось реализовать функции для экспорта данных в популярных форматах. В частности, в формате Microsoft Excel. Требования к экспорту были довольно простые – экспортировать данные с минимумом форматирования, т.е. никаких объединенных ячеек, игр со шрифтами и т.п. Форматы экспорта XLSX и Excel XML.</p><p>В данном случае расскажу про <a href="http://technet.microsoft.com/ru-ru/magazine/2006.01.blogtales(en-us).aspx">Excel XML</a>.<br><a name="habracut"></a><br>Итак, в любой системе оперирующей табличными данными раной или поздно возникает потребность экспорта данных. Цели экспорта разные:<br></p><ul><li>передача данных в табличном виде</li><li>анализ данных в соотв. системах</li><li>построение диаграмм</li><li>построение сводных таблиц и т.п.</li></ul><br>Исходя из целей, напросился разумный вывод, что при экспорте данных надо постараться сохранить или указать тип данных в соответствующих колонках, чтобы приложение, которое открывает файл не пыталось применить форматирование по своему усмотрению. Говоря иначе, даты должны быть датами, числа – числами, строки – строками.<p><br><br></p><h4>Задача</h4><br>Технические требования сформулировал тривиально:\r\n<ul><li>Оформить экспортирующий механизм в виде автономного класса</li><li>Реализовать в классе набор функций для записи значений ячеек и ряда</li><li>Возможность работы с неограниченным объемом данных.</li></ul><br>Оформить экспортирующий механизм в виде автономного класса — очевидное требование, выполнение которого позволит в будущем поделиться классом с другими разработчиками и использовать его в новых проектах.<p><br><br>Реализовать в классе набор функций для записи значений ячеек и ряда – основное требование, подразумевающее создание функций для записи значений ячеек указанных типов и возможность записи готового ряда в файл.</p><p><br><br>Возможность работы с неограниченным объемом данных – разумеется, сам класс экспорта отвечать за записываемый объем не сможет, но он должен предоставить функции для записи данных на диск и освобождения оперативной памяти для следующей порции данных.</p><p><br><br>Помимо описанных требований, понадобилось добавить сервисные функции:<br></p><ul><li>Включение <a href="http://office.microsoft.com/ru-ru/excel-help/RZ001145981.aspx">автофильтра</a></li><li>Сжатия файла в <a href="http://help.ubuntu.ru/wiki/zip?s[]=zip">zip</a>.</li></ul><p><br><br></p><h4>Реализация</h4><br>Прежде всего, при создании класса осуществляю проверку конечного имени файла и запрашиваю количество колонок и рядов. Файл должен иметь корректное имя, а папка, в которую он будет сохранен, должна существовать. Все как обычно.<br>Формат Excel XML позволяет сохранять в файле информацию о пользователе, который его создал, поэтому, при создании заголовка записываю название организации, информация о пользователе и дате создания файла. <p><br><br></p><pre><code><span class="keyword" data-redactor-tag="span">public</span> <span class="function"><span class="keyword" data-redactor-class="keyword">function</span> <span class="title">writeDocumentProperties</span><span class="params">(<span class="variable" data-redactor-class="variable">$organization</span> = null, <span class="variable">$user</span> = null)</span> {</span> fwrite(<span class="variable">$this</span>-&gt;file, <span class="string">''&lt;DocumentProperties xmlns="urn:schemas-microsoft-com:office:office"&gt;''</span>); <span class="keyword">if</span> (!is_null(<span class="variable">$user</span>)) { fwrite(<span class="variable">$this</span>-&gt;file, <span class="string">''&lt;Author&gt;''</span>.<span class="variable">$user</span>-&gt;description.<span class="string">''&lt;/Author&gt;''</span>); fwrite(<span class="variable">$this</span>-&gt;file, <span class="string">''&lt;LastAuthor&gt;''</span>.<span class="variable">$user</span>-&gt;description.<span class="string">''&lt;/LastAuthor&gt;''</span>); } <span class="variable">$dt</span> = <span class="keyword">new</span> Datetime(); <span class="variable">$dt_string</span> = <span class="variable">$dt</span>-&gt;format(<span class="string">''Y-m-d\\TH:i:s\\Z''</span>); fwrite(<span class="variable">$this</span>-&gt;file, <span class="string">''&lt;Created&gt;''</span>.<span class="variable">$dt_string</span>.<span class="string">''&lt;/Created&gt;''</span>); fwrite(<span class="variable">$this</span>-&gt;file, <span class="string">''&lt;LastSaved&gt;''</span>.<span class="variable">$dt_string</span>.<span class="string">''&lt;/LastSaved&gt;''</span>); <span class="keyword">if</span> (!is_null(<span class="variable">$organization</span>)) fwrite(<span class="variable">$this</span>-&gt;file, <span class="string">''&lt;Company&gt;''</span>.<span class="variable">$organization</span>-&gt;name.<span class="string">''&lt;/Company&gt;''</span>); fwrite(<span class="variable">$this</span>-&gt;file, <span class="string">''&lt;Version&gt;12.00&lt;/Version&gt;''</span>); fwrite(<span class="variable">$this</span>-&gt;file, <span class="string">''&lt;/DocumentProperties&gt;''</span>); } </code></pre><br>Правда, именно в этой функции используются сущности системы документооборота — organization (организация) и user (пользователь). Заменить эти сущности на, скажем, строковые значения, не проблема.<p><br><br>Наиболее интересной в заголовке является информация о стилях. В формате Excel XML они реализованы очень удобно, поэтому просто создаю таблицу со стилями для строк, даты/времени и гиперссылки.</p><p><br><br></p><pre><code><span class="keyword" data-redactor-tag="span">public</span> <span class="function"><span class="keyword" data-redactor-class="keyword">function</span> <span class="title">writeStyles</span><span class="params">()</span> {</span> fwrite(<span class="variable">$this</span>-&gt;file, <span class="string">''&lt;Styles&gt;''</span>); <span class="comment">//default style</span> fwrite(<span class="variable">$this</span>-&gt;file, <span class="string">''&lt;Style ss:ID="Default" ss:Name="Normal"&gt;&lt;Font ss:Color="#000000"/&gt;&lt;/Style&gt;''</span>); <span class="comment">//Datetime style</span> fwrite(<span class="variable">$this</span>-&gt;file, <span class="string">''&lt;Style ss:ID="DateTime"&gt;&lt;NumberFormat ss:Format="General Date"/&gt;&lt;/Style&gt;''</span>); fwrite(<span class="variable">$this</span>-&gt;file, <span class="string">''&lt;Style ss:ID="Date"&gt;&lt;NumberFormat ss:Format="Short Date"/&gt;&lt;/Style&gt;''</span>); fwrite(<span class="variable">$this</span>-&gt;file, <span class="string">''&lt;Style ss:ID="Time"&gt;&lt;NumberFormat ss:Format="h:mm:ss"/&gt;&lt;/Style&gt;''</span>); <span class="comment">//Hyperlink style</span> fwrite(<span class="variable">$this</span>-&gt;file, <span class="string">''&lt;Style ss:ID="Hyperlink" ss:Name="Hyperlink"&gt;&lt;Font ss:Color="#0000FF" ss:Underline="Single"/&gt;&lt;/Style&gt;''</span>); <span class="comment">//Bold</span> fwrite(<span class="variable">$this</span>-&gt;file, <span class="string">''&lt;Style ss:ID="Bold"&gt;&lt;Font ss:Bold="1"/&gt;&lt;/Style&gt;''</span>); fwrite(<span class="variable">$this</span>-&gt;file, <span class="string">''&lt;/Styles&gt;''</span>); } </code></pre><p><br><br>Подготовительные работы закончил, можно переходить к записи данных. Открытие рабочего листа – это всего пара тэгов, как раз в этот момент используется информация о количестве колонок и рядов.</p><p><br><br></p><pre><code>public function openWorksheet() { fwrite($this-&gt;file, ''<span class="tag" data-redactor-tag="span">&lt;<span class="title" data-redactor-class="title">Worksheet</span> <span class="attribute">ss:Name</span>=<span class="value">"Export"</span>&gt;</span>''); fwrite($this-&gt;file, strtr(''<span class="tag">&lt;<span class="title" data-redactor-class="title">Table</span> <span class="attribute">ss:ExpandedColumnCount</span>=<span class="value">"{col_count}"</span> <span class="attribute">ss:ExpandedRowCount</span>=<span class="value">"{row_count}"</span> <span class="attribute">x:FullColumns</span>=<span class="value">"1"</span> <span class="attribute">x:FullRows</span>=<span class="value">"1"</span> <span class="attribute">ss:DefaultRowHeight</span>=<span class="value">"15"</span>&gt;</span>'', array(''{col_count}''=&gt;$this-&gt;colCount, ''{row_count}''=&gt;$this-&gt;rowCount))); } </code></pre><br>Но вот запись рядов – процесс поинтереснее. Класс должен работать быстро и обрабатывать неограниченный объем данных, ведь записей может быть тысяч сто или даже миллион! Хочешь скорости – работай с памятью, хочешь неограниченный объем данных – работай с диском. Чтобы помирить требования, реализовал функции resetRow и flushRow.<br>Первая – очищает текущий ряд, после чего его снова можно наполнять данными, а вторая – записывает текущий ряд в открытый файл на диск. Их совместное использование позволяет выдерживать баланс между скоростью и объемом используемой памяти.<p><br><br></p><pre><code><span class="keyword" data-redactor-tag="span">public</span> <span class="function"><span class="keyword" data-redactor-class="keyword">function</span> <span class="title">resetRow</span><span class="params">()</span> {</span> <span class="variable">$this</span>-&gt;currentRow = <span class="keyword">array</span>(); } <span class="keyword">public</span> <span class="function"><span class="keyword" data-redactor-class="keyword">function</span> <span class="title">flushRow</span><span class="params">()</span> {</span> fwrite(<span class="variable">$this</span>-&gt;file, implode(<span class="string">''''</span>, <span class="variable">$this</span>-&gt;currentRow)); <span class="keyword">unset</span>(<span class="variable">$this</span>-&gt;currentRow); } </code></pre><br>Каждая ячейка записывается функцией соответствующей типу данных, а именно appendCellxxx, где xxx – тип данных. Допустимые типы данных: Num, String, Real, DateTime, Date, Time, Link. Пример функции для записи числового значения:<p><br><br></p><pre><code><span class="keyword" data-redactor-tag="span">public</span> <span class="function"><span class="keyword" data-redactor-class="keyword">function</span> <span class="title">appendCellNum</span><span class="params">(<span class="variable" data-redactor-class="variable">$value</span>)</span> {</span> <span class="variable">$this</span>-&gt;currentRow[] = <span class="string">''&lt;Cell&gt;&lt;Data ss:Type="Number"&gt;''</span>.<span class="variable">$value</span>.<span class="string">''&lt;/Data&gt;&lt;/Cell&gt;''</span>; } </code></pre><br>После записи всех данных остается закрыть рабочий лист и рабочую книгу.<p><br><br></p><h4>Применение</h4><br>Использование описанного класса основано на экспорте данных с помощью провайдера <a href="http://www.yiiframework.com/doc/api/1.1/CArrayDataProvider">CArrayDataProvider</a>. Однако, предполагая, что объем экспортируемых данных может оказаться очень большим применен специальный итератор<a href="http://www.yiiframework.com/doc/api/1.1/CDataProviderIterator">CDataProviderIterator</a>, который перебирает возвращаемые данные по 100 записей (можно указать иное число записей).<p><br><br></p><pre><code><span class="keyword" data-redactor-tag="span">public</span> <span class="function"><span class="keyword" data-redactor-class="keyword">function</span> <span class="title">exportExcelXML</span><span class="params">(<span class="variable" data-redactor-class="variable">$organization</span>, <span class="variable">$user</span>, &amp;<span class="variable">$filename</span>)</span> {</span> <span class="variable">$this</span>-&gt;_provider = <span class="keyword">new</span> CArrayDataProvider(<span class="comment">/*query*/</span>); Yii::import(<span class="string">''ext.AlxdExportExcelXML.AlxdExportExcelXML''</span>); <span class="variable">$export</span> = <span class="keyword">new</span> AlxdExportExcelXML(<span class="variable">$filename</span>, count(<span class="variable">$this</span>-&gt;_attributes), <span class="variable">$this</span>-&gt;_provider-&gt;getTotalItemCount() + <span class="number">1</span>); <span class="variable">$export</span>-&gt;openWriter(); <span class="variable">$export</span>-&gt;openWorkbook(); <span class="variable">$export</span>-&gt;writeDocumentProperties(<span class="variable">$organization</span>, <span class="variable">$user</span>); <span class="variable">$export</span>-&gt;writeStyles(); <span class="variable">$export</span>-&gt;openWorksheet(); <span class="comment">//title row</span> <span class="variable">$export</span>-&gt;resetRow(); <span class="variable">$export</span>-&gt;openRow(<span class="keyword">true</span>); <span class="keyword">foreach</span> (<span class="variable">$this</span>-&gt;_attributes <span class="keyword">as</span> <span class="variable">$code</span> =&gt; <span class="variable">$format</span>) <span class="variable">$export</span>-&gt;appendCellString(<span class="variable">$this</span>-&gt;_objectref-&gt;getAttributeLabel(<span class="variable">$code</span>)); <span class="variable">$export</span>-&gt;closeRow(); <span class="variable">$export</span>-&gt;flushRow(); <span class="comment">//data rows</span> <span class="variable">$rows</span> = <span class="keyword">new</span> CDataProviderIterator(<span class="variable">$this</span>-&gt;_provider, <span class="number">100</span>); <span class="keyword">foreach</span> (<span class="variable">$rows</span> <span class="keyword">as</span> <span class="variable">$row</span>) { <span class="variable">$export</span>-&gt;resetRow(); <span class="variable">$export</span>-&gt;openRow(); <span class="keyword">foreach</span> (<span class="variable">$this</span>-&gt;_attributes <span class="keyword">as</span> <span class="variable">$code</span> =&gt; <span class="variable">$format</span>) { <span class="keyword">switch</span> (<span class="variable">$format</span>-&gt;type) { <span class="keyword">case</span> <span class="string">''Num''</span>: <span class="variable">$export</span>-&gt;appendCellNum(<span class="variable">$row</span>[<span class="variable">$code</span>]); <span class="comment">/*other types*/</span> <span class="keyword">default</span>: <span class="variable">$export</span>-&gt;appendCellString(<span class="string">''''</span>); } } <span class="variable">$export</span>-&gt;closeRow(); <span class="variable">$export</span>-&gt;flushRow(); } <span class="comment">//close all</span> <span class="variable">$export</span>-&gt;closeWorksheet(); <span class="variable">$export</span>-&gt;closeWorkbook(); <span class="variable">$export</span>-&gt;closeWriter(); <span class="comment">//zip file</span> <span class="variable">$export</span>-&gt;zip(); <span class="variable">$filename</span> = <span class="variable">$export</span>-&gt;getZipFullFileName(); } </code></pre><br>В моем случае, каждый ряд записывается на диск, что, пока, является вполне приемлемым, но в будущем, возможно, потребует изменений. Например, будет разумно сохранять не каждый ряд, а каждый десяток или даже сотню рядов за раз. Тогда скорость экспорта увеличится.<p><br><br></p><h4>Скорость</h4><br>Кстати, на собственном опыте убедился, как важно предполагать возможность существования больших объемов данных при пакетной операции, такой как экспорт. <br>Изначально, пытался осуществлять экспорт данных используя <a href="http://www.yiiframework.com/doc/api/1.1/CActiveDataProvider">CActiveDataProvider</a>, что требовало при экспорте 1000 записей порядка 240 секунд! Изменив запрос так, чтобы использовать <a href="http://www.yiiframework.com/doc/api/1.1/CArrayDataProvider">CArrayDataProvider</a> сократил время экспорта 1000 записей до 0.5 секунды!<br>Специально для этой публикации замерил показатели экспорта.<br>Экспортировал <b>1626</b> записей с <b>9</b> атрибутами, представляющих собой информацию о закрытых инцидентах (см. <a href="http://en.wikipedia.org/wiki/Incident_management_(ITSM)">ITSM</a>).<p><br><br></p><h5>Исходный вид экспортируемой таблицы</h5><br>(извините, картинка исчезает после публикации)<p><br><br></p><h5>Результат</h5><br>(извините, картинка исчезает после публикации)<p><br><br></p><h5>Показатели экспорта</h5><br>Объем конечного файла: <b>1 312 269</b><br>Объем сжатого файла: <b>141 762</b><br>Затраченное время: примерно <b>0.5</b> сек<p><br><br>Кому интересно, может получить исходный код моего класса <a href="https://github.com/Alxdhere/AlxdExportExcelXML">AlxdExportExcelXML</a> безвозмездно. Только надо не забыть поправить функцию <i>writeDocumentProperties</i>, чтобы отвязаться от сущностей системы документооборота organization и user, или использовать свои аналогичные сущности с соответствующими свойствами.</p>', '', '', 1, 1414734572, 1414734572);
INSERT INTO `articles` (`id`, `title`, `alias`, `category_id`, `author_id`, `snippet`, `content`, `image_url`, `preview_url`, `status_id`, `created_at`, `updated_at`) VALUES
(5, 'Генерация HTML: удобнее чем хелперы и чистый HTML', 'generatsiya-html-udobnee-chem-helperi-i-chistiy-html', 2, NULL, '<p>Писать чистый HTML часто неудобно, особенно если нужно делать динамические вставки.<br><br>Шаблонизаторы частично решают эту проблему, но их причудливый синтаксис нужно изучать, мириться с ограничениями, вкладывать одни шаблоны в другие для повторного использования, в целом попытка хороша, но что-то не то.<br><br>В некоторых фреймворках есть хелперы, в частности написать эту статью меня вынудила <a href="https://github.com/auraphp/Aura.Html">Aura.Html</a>. С хелперами иная история — они изначально задуманы для реального упрощения, поскольку одной командой могут генерировать хороший кусок HTML кода, но они в большинстве заточены под определённое использование, и что-то дальше этого выглядит слишком криво.<br><br>Как более универсальное решение было бы не плохо не изобретать причудливый синтаксис, а использовать самый обычный PHP и всем знакомые примитивные CSS-селекторы.<br><br>Размышляя в таком духе некоторое время назад я принялся пилить свой велосипед. Велосипед получился, использовался в рамках другого велосипеда, потом отделился, много раз обновлялся, и сейчас я хотел бы поделиться им с сообществом.</p>', '<p>Писать чистый HTML часто неудобно, особенно если нужно делать динамические вставки.</p><p><br><br>Шаблонизаторы частично решают эту проблему, но их причудливый синтаксис нужно изучать, мириться с ограничениями, вкладывать одни шаблоны в другие для повторного использования, в целом попытка хороша, но что-то не то.</p><p><br><br>В некоторых фреймворках есть хелперы, в частности написать эту статью меня вынудила <a href="https://github.com/auraphp/Aura.Html">Aura.Html</a>. С хелперами иная история — они изначально задуманы для реального упрощения, поскольку одной командой могут генерировать хороший кусок HTML кода, но они в большинстве заточены под определённое использование, и что-то дальше этого выглядит слишком криво.</p><p><br><br>Как более универсальное решение было бы не плохо не изобретать причудливый синтаксис, а использовать самый обычный PHP и всем знакомые примитивные CSS-селекторы.</p><p><br><br>Размышляя в таком духе некоторое время назад я принялся пилить свой велосипед. Велосипед получился, использовался в рамках другого велосипеда, потом отделился, много раз обновлялся, и сейчас я хотел бы поделиться им с сообществом.<br><a name="habracut"></a><br></p><h4>Как оно работает?</h4><br>Идея была в том, чтобы сделать как можно проще:<p><br><br></p><pre><code>h::div(<span class="string" data-redactor-tag="span">''Content''</span>) </code></pre><br>что на выходе даст<p><br><br></p><pre><code><span class="tag" data-redactor-tag="span">&lt;<span class="title" data-redactor-class="title">div</span>&gt;</span> Content <span class="tag">&lt;/<span class="title" data-redactor-class="title">div</span>&gt;</span> </code></pre><br>Это самый простой пример. Название метода — тэг, внутри передается значение. Если нужно добавить атрибутов — не проблема:<p><br><br></p><pre><code>h::div( <span class="string" data-redactor-tag="span">''Content''</span>, [ <span class="string">''class''</span> =&gt; <span class="string">''some-content''</span> ] ) </code></pre>\r\n<pre><code><span class="tag" data-redactor-tag="span">&lt;<span class="title" data-redactor-class="title">div</span> <span class="attribute">class</span>=<span class="value">"some-content"</span>&gt;</span> Content <span class="tag">&lt;/<span class="title" data-redactor-class="title">div</span>&gt;</span> </code></pre><br>И можно было бы подумать, что проще уже никак, но тут на помощь приходят CSS-селекторы, и немного уличной магии:<p><br><br></p><pre><code>h::{<span class="string" data-redactor-tag="span">''div.some-content''</span>}(<span class="string">''Content''</span>) </code></pre><br>На выходе будет то же самое. С первого взгляда может показаться немного странным, но на практике весьма удобно.<p><br><br></p><h4>В сравнении с Aura.Html</h4><br>В начале я упоминал Aura.Html, стоит сравнить как генерируется HTML там, и тут.<br>Aura.Html (пример из документации):<p><br><br></p><pre><code><span class="variable" data-redactor-tag="span">$helper</span>-&gt;input(<span class="keyword">array</span>( <span class="string">''type''</span> =&gt; <span class="string">''search''</span>, <span class="string">''name''</span> =&gt; <span class="string">''foo''</span>, <span class="string">''value''</span> =&gt; <span class="string">''bar''</span>, <span class="string">''attribs''</span> =&gt; <span class="keyword">array</span>() )); </code></pre><br>Наш вариант:<p><br><br></p><pre><code>h::{<span class="string" data-redactor-tag="span">''input[type=search][name=foo][value=bar]''</span>}() </code></pre><br>Любой из параметров можно было вынести в массив.<br>На выходе:<p><br><br></p><pre><code><span class="tag" data-redactor-tag="span">&lt;<span class="title" data-redactor-class="title">input</span> <span class="attribute">name</span>=<span class="value">"foo"</span> <span class="attribute">type</span>=<span class="value">"search"</span> <span class="attribute">value</span>=<span class="value">"bar"</span>&gt;</span> </code></pre><br>И ещё вариант посерьезней.<p><br><br>Aura.Html (пример из документации):</p><p><br><br></p><pre><code><span class="variable" data-redactor-tag="span">$helper</span>-&gt;input(<span class="keyword">array</span>( <span class="string">''type''</span> =&gt; <span class="string">''select''</span>, <span class="string">''name''</span> =&gt; <span class="string">''foo''</span>, <span class="string">''value''</span> =&gt; <span class="string">''bar''</span>, <span class="string">''attribs''</span> =&gt; <span class="keyword">array</span>( <span class="string">''placeholder''</span> =&gt; <span class="string">''Please pick one''</span>, ), <span class="string">''options''</span> =&gt; <span class="keyword">array</span>( <span class="string">''baz''</span> =&gt; <span class="string">''Baz Label''</span>, <span class="string">''dib''</span> =&gt; <span class="string">''Dib Label''</span>, <span class="string">''bar''</span> =&gt; <span class="string">''Bar Label''</span>, <span class="string">''zim''</span> =&gt; <span class="string">''Zim Label''</span>, ), )) </code></pre><br>Наш вариант:<p><br><br></p><pre><code>h::{<span class="string" data-redactor-tag="span">''select[name=foo]''</span>}([ <span class="string">''in''</span> =&gt; [ <span class="string">''Please pick one''</span>, <span class="string">''Baz Label''</span>, <span class="string">''Dib Label''</span>, <span class="string">''Bar Label''</span>, <span class="string">''Zim Label''</span> ], <span class="string">''value''</span> =&gt; [ <span class="string">''''</span>, <span class="string">''baz''</span>, <span class="string">''dib''</span>, <span class="string">''bar''</span>, <span class="string">''zim''</span> ], <span class="string">''selected''</span> =&gt; <span class="string">''bar''</span>, <span class="string">''disabled''</span> =&gt; <span class="string">''''</span> ]) </code></pre><br>Тут <i>in</i> используется явно, его можно использовать для передачи внутренностей тэга, как <i>Content</i> в примере с <i>div</i> выше. Используются как общие правила, так и некоторые специальные, немного подробнее о которых дальше.<br>На выходе то же самое:<p><br><br></p><pre><code><span class="tag" data-redactor-tag="span">&lt;<span class="title" data-redactor-class="title">select</span> <span class="attribute">name</span>=<span class="value">"foo"</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">option</span> <span class="attribute">disabled</span> <span class="attribute">value</span>=<span class="value">""</span>&gt;</span>Please pick one<span class="tag">&lt;/<span class="title" data-redactor-class="title">option</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">option</span> <span class="attribute">value</span>=<span class="value">"baz"</span>&gt;</span>Baz Label<span class="tag">&lt;/<span class="title" data-redactor-class="title">option</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">option</span> <span class="attribute">value</span>=<span class="value">"dib"</span>&gt;</span>Dib Label<span class="tag">&lt;/<span class="title" data-redactor-class="title">option</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">option</span> <span class="attribute">selected</span> <span class="attribute">value</span>=<span class="value">"bar"</span>&gt;</span>Bar Label<span class="tag">&lt;/<span class="title" data-redactor-class="title">option</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">option</span> <span class="attribute">value</span>=<span class="value">"zim"</span>&gt;</span>Zim Label<span class="tag">&lt;/<span class="title" data-redactor-class="title">option</span>&gt;</span> <span class="tag">&lt;/<span class="title" data-redactor-class="title">select</span>&gt;</span> </code></pre>\r\n<h4>Специальная обработка</h4><br>Все тэги следуют общим правилам обработки, но есть некоторые тэги, которые имеют дополнительные конструкции для удобства.<br>Например:<p><br><br></p><pre><code>h::{<span class="string" data-redactor-tag="span">''input[name=agree][type=checkbox][value=1][checked=1]''</span>}() </code></pre>\r\n<pre><code><span class="tag" data-redactor-tag="span">&lt;<span class="title" data-redactor-class="title">input</span> <span class="attribute">name</span>=<span class="value">"agree"</span> <span class="attribute">checked</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">value</span>=<span class="value">"1"</span>&gt;</span> </code></pre><br>Работает похоже с <i>select</i>, в <i>value</i> значение, а <i>checked</i> проставится когда совпадет одноименный элемент передаваемого массива.<p><br><br>Ещё один пример использования <i>in</i> и специальной обработкой <i>input[type=radio]</i>:</p><p><br><br></p><pre><code>h::{<span class="string" data-redactor-tag="span">''input[type=radio]''</span>}([ <span class="string">''checked''</span> =&gt; <span class="number">1</span>, <span class="string">''value''</span> =&gt; [<span class="number">0</span>, <span class="number">1</span>], <span class="string">''in''</span> =&gt; [<span class="string">''Off''</span>, <span class="string">''On''</span>] ]) </code></pre>\r\n<pre><code><span class="tag" data-redactor-tag="span">&lt;<span class="title" data-redactor-class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">value</span>=<span class="value">"0"</span>&gt;</span> Off <span class="tag">&lt;<span class="title" data-redactor-class="title">input</span> <span class="attribute">checked</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">value</span>=<span class="value">"1"</span>&gt;</span> On </code></pre><br>Никаких оберток <i>label</i> не добавляется специально, чтобы сделать код максимально общим и предсказуемым.<p><br><br></p><h4>Если нужно обработать массив</h4><br>Это, наверное, самая часто используемая вместе с контролем вложенности возможность, так как данные и правда часто приходят откуда-то в виде массива.<br>Для обработки массива его можно передать прямо вместо значения:<p><br><br></p><pre><code>h::{<span class="string" data-redactor-tag="span">''tr td''</span>}([ <span class="string">''First cell''</span>, <span class="string">''Second cell''</span>, <span class="string">''Third cell''</span> ]) </code></pre><br>Либо даже опустить лишние скобки в самом простом случае<p><br><br></p><pre><code>h::{<span class="string" data-redactor-tag="span">''tr td''</span>}( <span class="string">''First cell''</span>, <span class="string">''Second cell''</span>, <span class="string">''Third cell''</span> ) </code></pre><br>На выходе:<p><br><br></p><pre><code><span class="tag" data-redactor-tag="span">&lt;<span class="title" data-redactor-class="title">tr</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">td</span>&gt;</span> First cell <span class="tag">&lt;/<span class="title" data-redactor-class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">td</span>&gt;</span> Second cell <span class="tag">&lt;/<span class="title" data-redactor-class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">td</span>&gt;</span> Third cell <span class="tag">&lt;/<span class="title" data-redactor-class="title">td</span>&gt;</span> <span class="tag">&lt;/<span class="title" data-redactor-class="title">tr</span>&gt;</span> </code></pre><p><br><br>Каждый элемент массива будет обработан отдельно, то есть вполне законно передавать не только строки, но и некоторые атрибуты, правда, иногда это выглядит слишком монструозно:</p><p><br><br></p><pre><code>h::{<span class="string" data-redactor-tag="span">''tr.row td.cs-left[style=text-align:left;][colspan=2]''</span>}( <span class="string">''First cell''</span>, [ <span class="string">''Second cell''</span>, [ <span class="string">''class''</span> =&gt; <span class="string">''middle-cell''</span>, <span class="string">''style''</span> =&gt; <span class="string">''color:red;''</span>, <span class="string">''colspan''</span> =&gt; <span class="number">1</span> ] ], [ <span class="string">''Third cell''</span>, [ <span class="string">''colspan''</span> =&gt; <span class="keyword">false</span> ] ] ) </code></pre><br>Если в вызове тоже были указаны атрибуты — <i>class</i> и <i>style</i> будут расширены, остальные перезаписаны, атрибуты с логическим значением <i>false</i> будут удалены.<p><br><br></p><pre><code><span class="tag" data-redactor-tag="span">&lt;<span class="title" data-redactor-class="title">tr</span> <span class="attribute">class</span>=<span class="value">"row"</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">td</span> <span class="attribute">class</span>=<span class="value">"cs-left"</span> <span class="attribute">colspan</span>=<span class="value">"2"</span> <span class="attribute">style</span>=<span class="value">"text-align:left;"</span>&gt;</span> First cell <span class="tag">&lt;/<span class="title" data-redactor-class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">td</span> <span class="attribute">class</span>=<span class="value">"cs-left middle-cell"</span> <span class="attribute">colspan</span>=<span class="value">"1"</span> <span class="attribute">style</span>=<span class="value">"text-align:left;color:red;"</span>&gt;</span> Second cell <span class="tag">&lt;/<span class="title" data-redactor-class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">td</span> <span class="attribute">class</span>=<span class="value">"cs-left"</span> <span class="attribute">style</span>=<span class="value">"text-align:left;"</span>&gt;</span> Third cell <span class="tag">&lt;/<span class="title" data-redactor-class="title">td</span>&gt;</span> <span class="tag">&lt;/<span class="title" data-redactor-class="title">tr</span>&gt;</span> </code></pre><br>С помощью волшебной палочки, которая не является привычной частью CSS-селектора (это единственное исключение, без которого можно обойтись), можно управлять тем, как будут обрабатываться уровни вложенности:<p><br><br></p><pre><code>h::{<span class="string" data-redactor-tag="span">''tr| td''</span>}([ [ <span class="string">''First row, first column''</span>, <span class="string">''First row, second column''</span> ], [ <span class="string">''Second row, first column''</span>, <span class="string">''Second row, second column''</span> ] ]) </code></pre>\r\n<pre><code>&lt;tr&gt; &lt;td&gt; First row, first column &lt;/td&gt; &lt;td&gt; First row, second column &lt;/td&gt; &lt;tr&gt; &lt;tr&gt; &lt;td&gt; Second row, first column &lt;/td&gt; &lt;td&gt; Second row, second column &lt;/td&gt; &lt;tr&gt; </code></pre><br>Если массив получен из базы данных, или иного хранилища — удобно использовать такой массив напрямую, и это можно сделать передав в специальный атрибут <i>insert</i>:<p><br><br></p><pre><code><span class="variable" data-redactor-tag="span">$array</span> = [ [ <span class="string">''text''</span> =&gt; <span class="string">''Text1''</span>, <span class="string">''id''</span> =&gt; <span class="number">10</span> ], [ <span class="string">''text''</span> =&gt; <span class="string">''Text2''</span>, <span class="string">''id''</span> =&gt; <span class="number">20</span> ] ]; h::a( <span class="string">''$i[text]''</span>, [ <span class="string">''href''</span> =&gt; <span class="string">''Page/$i[id]''</span>, <span class="string">''insert''</span> =&gt; <span class="variable">$array</span> ] ) </code></pre>\r\n<pre><code><span class="tag" data-redactor-tag="span">&lt;<span class="title" data-redactor-class="title">a</span> <span class="attribute">href</span>=<span class="value">"Page/10"</span>&gt;</span> Text1 <span class="tag">&lt;/<span class="title" data-redactor-class="title">a</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">a</span> <span class="attribute">href</span>=<span class="value">"Page/20"</span>&gt;</span> Text2 <span class="tag">&lt;/<span class="title" data-redactor-class="title">a</span>&gt;</span> </code></pre><br>Можно и в одну строчку все атрибуты написать:<p><br><br></p><pre><code><span class="variable" data-redactor-tag="span">$array</span> = [ [ <span class="string">''id''</span> =&gt; <span class="string">''first_checkbox''</span>, <span class="string">''value''</span> =&gt; <span class="number">1</span> ], [ <span class="string">''id''</span> =&gt; <span class="string">''second_checkbox''</span>, <span class="string">''value''</span> =&gt; <span class="number">0</span> ], [ <span class="string">''id''</span> =&gt; <span class="string">''third_checkbox''</span>, <span class="string">''value''</span> =&gt; <span class="number">1</span> ] ]; h::{<span class="string">''input[id=$i[id]][type=checkbox][checked=$i[value]][value=1]''</span>}([ <span class="string">''insert''</span> =&gt; <span class="variable">$array</span> ]) </code></pre>\r\n<pre><code><span class="tag" data-redactor-tag="span">&lt;<span class="title" data-redactor-class="title">input</span> <span class="attribute">id</span>=<span class="value">"first_checkbox"</span> <span class="attribute">checked</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">value</span>=<span class="value">"1"</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">input</span> <span class="attribute">id</span>=<span class="value">"second_checkbox"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">value</span>=<span class="value">"1"</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">input</span> <span class="attribute">id</span>=<span class="value">"third_checkbox"</span> <span class="attribute">checked</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">value</span>=<span class="value">"1"</span>&gt;</span> </code></pre>\r\n<h4>А ещё всё это можно расширять</h4><br>Этот класс представляет только общие, ни к чему не привязанные правила генерации HTML, которые могут быть использованы независимо от окружения.<br>Но иногда хочется упростить выполнение более сложных рутинных операций.<br>Например, я использую многие элементы UIkit на фронтенде, и, например, для переключателя нужна особым образом подготовленный HTML.<br>Скопировав оригинальный код обработки <i>input</i> и слегка отредактировав можно получить такой результат:<p><br><br></p><pre><code>h::radio([ <span class="string" data-redactor-tag="span">''checked''</span> =&gt; <span class="number">1</span>, <span class="string">''value''</span> =&gt; [<span class="number">0</span>, <span class="number">1</span>], <span class="string">''in''</span> =&gt; [<span class="string">''Off''</span>, <span class="string">''On''</span>] ]) </code></pre>\r\n<pre><code><span class="tag" data-redactor-tag="span">&lt;<span class="title" data-redactor-class="title">span</span> <span class="attribute">class</span>=<span class="value">"uk-button-group"</span> <span class="attribute">data-uk-button-radio</span>=<span class="value">""</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">label</span> <span class="attribute">class</span>=<span class="value">"uk-button uk-active"</span> <span class="attribute">for</span>=<span class="value">"input_544f4ae475f58"</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">input</span> <span class="attribute">checked</span>=<span class="value">""</span> <span class="attribute">id</span>=<span class="value">"input_544f4ae475f58"</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">value</span>=<span class="value">"1"</span>&gt;</span> On <span class="tag">&lt;/<span class="title" data-redactor-class="title">label</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">label</span> <span class="attribute">class</span>=<span class="value">"uk-button"</span> <span class="attribute">for</span>=<span class="value">"input_544f4ae475feb"</span>&gt;</span> <span class="tag">&lt;<span class="title" data-redactor-class="title">input</span> <span class="attribute">id</span>=<span class="value">"input_544f4ae475feb"</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">value</span>=<span class="value">"0"</span>&gt;</span> Off <span class="tag">&lt;/<span class="title" data-redactor-class="title">label</span>&gt;</span> <span class="tag">&lt;/<span class="title" data-redactor-class="title">span</span>&gt;</span> </code></pre><br>Так же можно переопределить метод <i>pre_processing</i>, и реализовать произвольную обработку атрибутов непосредственно перед рендерингом тэга, например, при наличии атрибута <i>data-title</i> я навешиваю класс, и таким образом получаю всплывающую подсказку над элементом при наведении.<p><br><br></p><h4>Преимущество использования</h4><br>Генерируется HTML без шанса оставить тэг незакрытым, или что-то в этом роде.<br>Везде используются общие правила обработки, которые логичны, весьма быстро запоминаются, и являются намного чаще удобными, чем наоборот.<br>Можно использовать с абсолютно любыми тэгами, даже с веб-компонентами (пример писать не буду, и так много примеров).<br>Нет никаких зависимостей, есть возможность унаследовать и переопределить/расширить по желанию всё что угодно, так как это всего лишь один статический класс, и больше ничего.<br>На выходе обычная строка, которую можно легко использовать вместе с абсолютно любым кодом, использовать на входе следующего вызова класса.<p><br><br></p><h4>Где взять и почитать</h4><br>На этом, пожалуй, хватит примеров.<br><a href="https://github.com/nazar-pc/BananaHTML">Исходный код на GitHub</a><br>Там же есть документация с подробным объяснением всех нюансов использования и всех поддерживаемых конструкций.<br>Поставить можно через <i>composer</i>, либо просто подключив файл с классом.<br><a href="https://github.com/nazar-pc/CleverStyle-CMS/blob/master/core/classes/h/Base.php">Пример наследования с добавлением функциональности</a><p><br><br></p><h4>Планы</h4><br>Нужно всё-таки отрефакторить <i>__callStatic()</i>, не сломав при этом ничего)<br>Было бы круто переписать на Zephir, и сделать расширение для PHP (это скорее мечта, но, возможно, когда-то возьмусь и за нее).', '', '', 1, 1414734880, 1414734880),
(6, 'Перевод часов в России 26 октября и icu4c', 'perevod-chasov-v-rossii-26-oktyabrya-i-icu4c', 2, NULL, '<p>Многие уже поставили обновление tzdata на свои любимые дистрибутивы и с нетерпением ждут конца света 26 октября 2014 года, когда можно будет в 2 часа ночи ощутить себя на все 3.<br><br>Но всё ли в порядке, если вы пишите на PHP и используете Symfony Forms, или просто php-intl?! <br>Мой ответ — нет.</p>', '<p>Многие уже поставили обновление tzdata на свои любимые дистрибутивы и с нетерпением ждут конца света 26 октября 2014 года, когда можно будет в 2 часа ночи ощутить себя на все 3.</p><p><br><br>Но всё ли в порядке, если вы пишите на PHP и используете Symfony Forms, или просто php-intl?! <br>Мой ответ — нет.<br><a name="habracut"></a><br>Проверить себя вы можете просто:</p><p><br><br></p><pre><code><span class="preprocessor" data-redactor-tag="span">&lt;?php</span> <span class="variable">$dateIn</span> = <span class="string">''27.10.2014''</span>; <span class="variable">$tz</span> = <span class="string">''Europe/Moscow''</span>; date_default_timezone_set(<span class="variable">$tz</span>); <span class="variable">$intlDateFormatter</span> = <span class="keyword">new</span> \\IntlDateFormatter(<span class="string">''ru_RU''</span>, <span class="number">2</span>, -<span class="number">1</span>, <span class="variable">$tz</span>, <span class="number">1</span>, <span class="string">''dd.MM.yyyy''</span>); <span class="variable">$timestamp</span> = <span class="variable">$intlDateFormatter</span>-&gt;parse(<span class="variable">$dateIn</span>); var_dump(<span class="variable">$intlDateFormatter</span>-&gt;format(<span class="variable">$timestamp</span>)); var_dump(date(<span class="string">''d.m.Y''</span>, <span class="variable">$timestamp</span>)); </code></pre><br>На Debian Wheezy, CentOS 6 после обновления tzdata этот код выведет:\r\n<pre><code>string(16) <span class="string" data-redactor-tag="span">"27.10.2014"</span> string(16) <span class="string">"26.10.2014"</span> </code></pre><br>Это происходит потому, что у библиотеки icu своя база данных временных зон (это популярное занятие, например, также делает php, java, chrome и вагон другого софта) и при пересчете даты в unix timestamp она отнимает 4 часа, а php функция date прибавляет только 3, и если поле у вас только для ввода даты, то после отбрасывания времени вы получите на день меньше от введенной даты.<p><br><br>Ситуацию усугубляет еще и то, что данные эти хранятся в виде библиотеки libicudata, поэтому готовьтесь собирать icu из исходников. </p><p><br><br>Все действия далее выполняются на отдельной VM под управлением CentOS 6.5 + remi + libicu-last.</p><p><br><br>По версии пакета определяем версию icu — 50.1.2 (<a href="http://apps.icu-project.org/icu-jsp/downloadPage.jsp?ver=50.1.2&amp;base=cs&amp;svn=release-50-1-2">исходники на сайте icu</a>), также <a href="http://source.icu-project.org/repos/icu/data/trunk/tzdata/icunew/2014i/44/le/">отсюда</a> скачиваем все *.res файлы, где (в ссылке)<br>2014i — версия tzdata;<br>44 — версия libicu (44 и все что больше);<br>le — little endian (дада если у вас mips arm и т.п. вам может потребоваться другой набор ресурсов).</p><p><br><br></p><pre><code>tar -zxf icu4c-50_1_2-src.tgz cd icu/source mkdir bin ./configure <span class="comment" data-redactor-tag="span"># собираем утилиту icupkg</span> cd tools/icupkg/ make cd ../../ <span class="comment"># теперь обновим файл данных </span> cd data/<span class="keyword">in</span>/ <span class="comment"># копируем скаченные ранее файлы в эту папку и добавляем их в файл данных</span> ../../bin/icupkg -a zoneinfo64.res icudt50l.dat ../../bin/icupkg -a metaZones.res icudt50l.dat ../../bin/icupkg -a timezoneTypes.res icudt50l.dat ../../bin/icupkg -a windowsZones.res icudt50l.dat <span class="comment"># после чего запускаем сборку</span> cd ../../ make </code></pre><br>В принципе, на этом можно остановиться и после сборки заменить в системе библиотеку из /usr/lib64/ на новую версию ./lib/libicudata.so.50.1.2.<p><br><br>Я же собрал пакет:</p><p><br><br></p><pre><code>yum install rpmrebuild rpmrebuild -e -p --notest-install libicu-last-50.1.2-10.el6.remi.x86_64.rpm </code></pre><br>По строчке вида<pre><code>BuildRoot: /root/.tmp/rpmrebuild.42406/work/root</code></pre>определяем, где находятся распакованные файлы пакета и заменяем libicudata на свежую версию, получившийся пакет (rpmbuild напишет полный путь после сборки) можно установить с указанием ключа --force, так как мы не меняли его версию.<p><br><br>Спасибо за внимание!</p><p><br><br><b>UPD:</b> Пользователи Ubuntu (Trusty|Precise) могут взять готовые пакеты в <a href="https://launchpad.net/~rzz/+archive/ubuntu/icu">ppa</a> хабрапользователя <a href="http://habrahabr.ru/users/ranzhe/" class="user_link">ranzhe</a></p>', '', '', 1, 1414734929, 1414734929),
(7, 'Центры SSL-сертификации о нововведениях с SHA-2', 'tsentri-ssl-sertifikatsii-o-novovvedeniyah-s-sha-2', 3, NULL, '<p>Ранее в <a href="http://habrahabr.ru/company/first/blog/241603/">статье </a>я рассказывал о том, что будет происходить с поддержкой браузерами от Mozilla, Google и Microsoft алгоритма шифрования SHA-1, используемого для генерации SSL-сертификатов и их подписи. Напомню, компания Microsoft несколько ультимативно дала понять центрам сертификации то, что они должны отказаться от использования SHA-1 («CAs must stop issuing new SHA1 SSL…») и перейти на более современные и криптостойкие алгоритмы. И сегодня мы рассмотрим, как на это отреагировали сами центры сертификации, и как это скажется на владельцах SSL-сертификатов.</p>', '<p>Ранее в <a href="http://habrahabr.ru/company/first/blog/241603/">статье </a>я рассказывал о том, что будет происходить с поддержкой браузерами от Mozilla, Google и Microsoft алгоритма шифрования SHA-1, используемого для генерации SSL-сертификатов и их подписи. Напомню, компания Microsoft несколько ультимативно дала понять центрам сертификации то, что они должны отказаться от использования SHA-1 («CAs must stop issuing new SHA1 SSL…») и перейти на более современные и криптостойкие алгоритмы. И сегодня мы рассмотрим, как на это отреагировали сами центры сертификации, и как это скажется на владельцах SSL-сертификатов.</p><p><br>Приведу информацию от некоторых крупных центров сертификации, которую они опубликовали на своих сайтах:</p><p><br><br><b>GoDaddy</b><br>«В обязательном порядке отзывают все сертификаты SHA-1 для их перевыпуска с использованием SHA-2. Все новые сертификаты со сроком окончания на дату от 1 января 2017 г. уже будут использовать только SHA-2. Остальные новые сертификаты также будут использовать SHA-2 Сертификаты подписания кода (Code-signing), чей срок истекает после 31 декабря 2015 г. должны использовать SHA-2.»</p><p><br><br><b>Comodo</b><br>«Начиная с 8 сентября 2014 г. Comodo стали выпускать сертификаты с SHA-2 по умолчанию.В зависимости от даты окончания действия сертификата владельцы последних будут уведомлены о замене сертификатов с SHA-1 на те, что созданы с использованием SHA-2. <br>Также центр сертификации Comodo опубликовал график своего ухода от использования SHA-1.</p><p><br><br></p><ul><li>8 сентября 2014 г. Все нынешние владельцы SSL-сертификатов могут заменить свой сертификат с SHA-1 на такой же, но с SHA-2. Сделать это можно авторизовавшись в личном кабинете, перейдя в заказ сертификатов и используя возможность «Replace Certificate».</li><li>8 сентября 2014 г. Comodo начинает выпускать SHA-2 сертификаты по умолчанию. Но предоставляет возможность выбирать при заказе сертификат с SHA-1, если это действительно нужно. Если при заказе не будет выбрана возможность SHA-1, то будет выслан сертификат с SHA-2.</li><li>22 сентября 2014 г. Comodo стали выпускать SSL-сертификаты, срок действия которых истекает после 2016 года только с использованием SHA-2.</li><li>1 января 2016 г. Comodo больше не поддерживает подписи или сертификаты, основанные на SHA-1.</li></ul><p><br><br>Сертификаты, чей срок действия истекает после 2016 года, Comodo бесплатно перевыпускает с использованием алгоритма хэширования SHA-2.»</p><p><br><br><b>Verisign/Symantec</b><br>«Владельцам сертификатов следует начать перевыпуск сертификатов до ноября 2014 года. Перевыпустить следует все сертификаты со сроком действия до 1 января 2016 года. SHA-1 можно будет выпустить, но только сроком до 31 декабря 2015 года.»</p><p><br><br>Судя по информации на сайте <a href="https://shaaaaaaaaaaaaa.com/">https://shaaaaaaaaaaaaa.com/</a>, где содержится наиболее актуальная информация по центрам сертификации, можно сказать, что в большинстве своем, компании отреагировали адекватно и своевременно. Предложили своим клиентам возможность бесплатно перевыпустить уже используемые сертификаты. Некоторые из центров временно оставили возможность выпустить сертификаты с использованием алгоритма хэширования SHA-1.</p><p><br><br>Помимо вышеуказанного сайта, проверить SSL-сертификат сайта можно сервисом от Symantec: <br><a href="https://ssltools.websecurity.symantec.com/checker/views/certCheck.jsp">https://ssltools.websecurity.symantec.com/checker/views/certCheck.jsp</a></p>', '', '', 1, 1414735220, 1414735220);
INSERT INTO `articles` (`id`, `title`, `alias`, `category_id`, `author_id`, `snippet`, `content`, `image_url`, `preview_url`, `status_id`, `created_at`, `updated_at`) VALUES
(8, 'Вирус-вымогатель CryptoBot сдаёт своих жертв через Twitter', 'virus-vimogatelj-cryptobot-sdaet-svoih-jertv-cherez-twitter', 3, NULL, '<p>Вирусы-вымогатели, которые шифруют файлы пользователей, требуя денег за расшифровку, терроризируют Интернет уже не первый год. Однако в нынешнем октябре они разбушевались не на шутку – очевидно, совершив новый эволюционный скачок в области автоматизации. В начале месяца массовому заражению криптолокером подверглись сотрудники крупнейшей австралийской вещательной компании ABC, а и также почтовые и другие государственные службы страны. В середине месяца более 100 тыс. американцев были заражены вирусом-шифровальщиком через рекламные баннеры, крутившиеся в роликах на YouTube.</p>', '<p>Вирусы-вымогатели, которые шифруют файлы пользователей, требуя денег за расшифровку, терроризируют Интернет уже не первый год. Однако в нынешнем октябре они разбушевались не на шутку – очевидно, совершив новый эволюционный скачок в области автоматизации. В начале месяца массовому заражению криптолокером подверглись сотрудники крупнейшей австралийской вещательной компании ABC, а и также почтовые и другие государственные службы страны. В середине месяца более 100 тыс. американцев были заражены вирусом-шифровальщиком через рекламные баннеры, крутившиеся в роликах на YouTube.</p><p><br><br>Ну а в последние дни октября случилась активизация опасного шифровальщика в российском сегменте Интернета. Пользователи получают по почте вредоносный файл, который представляет собой обфусцированный JavaScript размером 2.5 кб (MD5 ea834605f6bee2d4680aae0936655a30). При запуске троян загружает из Интернета и запускает дополнительные компоненты:</p><p><br><br>Описание вируса <a href="https://www.virustotal.com/ru/file/a3878013571b742214cf2fc91aad39c0c175c3138d9bd44c59ec47f1e93b1ac8/analysis/">присутствует на Virustotal</a>, там же в комментариях приводится и деобфусцированная версия скрипта. Можно заметить, что файл неоднократно загружался на ресурс 29 и 30 октября 2014 г:</p><p><br>А вот как выглядят имена зараженных файлов, приходящих в почте – в основном они изображают деловые документы, причём якобы проверенные антивирусом (Avast.Scanned.OK)</p><p><br>После того, как пользователь откроет приложенный файл и запустит вредоносный скрипт, его информируют о том, что его документы, фото, базы данных, а также другие важные файлы «были зашифрованы с использованием криптостойкого алгоритма RSA-1024».</p><p><br>Далее пользователю предлагается подробная инструкция по спасению своих цифровых активов, которая сводится к следующему набору действий:</p><p><br><br><i></i></p><ol><li><i>Ваши файлы зашифрованы. Отправьте нам письмо с KEY и UNIQUE в течение суток.</i></li><li><i>Нашли KEY.PRIVATE и UNIQUE.KEY на своем ПК, взяли пару зашифрованных файлов — отправили на почту paycrypt@gmail.com</i></li><li><i>Через некоторое время получаете ответ с гарантиями, инструкцией и стоимостью. Посетите наш Twitter. Посмотрите, что все получают ключи. После оплаты получаете ключ дешифрования, ПО и инструкцию по дешифрованию.</i></li></ol><br>Наиболее интересным в этой инструкции является пункт 3, в котором указан <a href="http://twitter.com/keybtc">Twitter-аккаунт</a>, публично разглашающий информацию об адресах электронной почты жертв атак. Это не только позволяет продолжать монетизацию (например, с помощью рассылки спама на адреса жертв, часть из которых указывало служебные адреса электронной почты), но может и нанести существенный вред репутации пострадавших.<p><br><br>В частности, некоторые исследователи уже занялись <a href="https://aminux.wordpress.com/2014/10/24/%D0%B2%D0%B8%D1%80%D1%83%D1%81%D1%8B-%D0%B2%D1%8B%D0%BC%D0%BE%D0%B3%D0%B0%D1%82%D0%B5%D0%BB%D0%B8-%D0%B2%D1%81%D1%91-%D0%BD%D0%B0%D0%B3%D0%BB%D0%B5%D0%B5/">анализом списка жертв</a> – среди них оказалось много IT-компаний, включая и такие, которые сами занимаются информационной безопасностью. </p><p><br><br>Как и в большинстве атак по электронной почте, в данном случае использовались версии вредоносного ПО, которое в момент атаки не детектировалось большинством антивирусов. В связи с этим эксперты Positive Technologies советуют не открывать письма с непонятными вложениями — даже от знакомых адресатов. А на инфраструктурном уровне, в дополнение к антивирусным решениям, рекомендуется применять специализированные песочницы для проверки входящей почты, а также ограничить получение почтовых вложений, содержащих исполняемый код, в том числе в архивах.</p>', '', '', 1, 1414735286, 1414735286),
(9, 'Вебинар — Управление доступом 2.0: актуальный подход к решению насущных проблем на базе решения Sail', 'vebinar-—-upravlenie-dostupom-20-aktualjniy-podhod-k-resheniyu-nasuschnih-problem-na-baze-resheniya-', 3, NULL, '<p><b>Дата проведения:</b> 11 ноября 2014г. <br><b>Время проведения:</b> с 12:00 до 13:00 (время московское)<br><b>Место проведения:</b> online</p><p><br><br>Для компаний, достигнувших определенного уровня зрелости, особую важность приобретает понимание того, кто имеет доступ к ее информационным системам и как много ресурсов необходимо для управления таким доступом. На этом этапе организации начинают проявлять больший интерес к проблемам контроля и управления правами доступа.</p><p><br><br>Чаще всего объектом повышенного внимания становятся избыточные права доступа:<br></p><ul><li>традиционно сложно контролируемый доступ внештатников и подрядчиков;</li><li>доступ уволенных сотрудников, который, если и блокируется, то далеко не сразу;</li><li>права, которые сотрудники накопили в результате переводов по должности и др.</li></ul><p><br>При этом выяснить, кто и куда имеет доступ, достаточно сложно (не говоря уже о том, чтобы сопоставить реальные полномочия с согласованными).</p><p><br><br>Для некоторых компаний более актуальна проблема ресурсных затрат на управление доступом: с одной стороны − большой объем работы по исполнению заявок на доступ, требующий соответствующего обеспечения, а с другой – время сотрудников, которые долго ожидают предоставления необходимых прав. Иногда также проблемой становится большое число обращений в поддержку по поводу сброса паролей, которые отнимают массу времени и у службы поддержки, и у самих пользователей.</p>', '<p><b>Дата проведения:</b> 11 ноября 2014г. </p><p><b>Время проведения:</b> с 12:00 до 13:00 (время московское)<br><b>Место проведения:</b> online</p><p><br><br>Для компаний, достигнувших определенного уровня зрелости, особую важность приобретает понимание того, кто имеет доступ к ее информационным системам и как много ресурсов необходимо для управления таким доступом. На этом этапе организации начинают проявлять больший интерес к проблемам контроля и управления правами доступа.</p><p><br><br>Чаще всего объектом повышенного внимания становятся избыточные права доступа:<br></p><ul><li>традиционно сложно контролируемый доступ внештатников и подрядчиков;</li><li>доступ уволенных сотрудников, который, если и блокируется, то далеко не сразу;</li><li>права, которые сотрудники накопили в результате переводов по должности и др.</li></ul><br>При этом выяснить, кто и куда имеет доступ, достаточно сложно (не говоря уже о том, чтобы сопоставить реальные полномочия с согласованными).<p><br><br>Для некоторых компаний более актуальна проблема ресурсных затрат на управление доступом: с одной стороны − большой объем работы по исполнению заявок на доступ, требующий соответствующего обеспечения, а с другой – время сотрудников, которые долго ожидают предоставления необходимых прав. Иногда также проблемой становится большое число обращений в поддержку по поводу сброса паролей, которые отнимают массу времени и у службы поддержки, и у самих пользователей.<br><a name="habracut"></a><br>На вебинаре вы узнаете:<br></p><ul><li>как процессы контроля и управления доступом автоматизируются средствами современных IdM-решений;</li><li>какие проблемы это поможет решить вашей компании;</li><li>что и как можно автоматизировать;</li><li>каковы типовые сценарии автоматизации, подводные камни и обходные пути.</li></ul><br>Также мы продемонстрируем наиболее распространенные способы использования IdM-решений и остановимся на особенностях решения SailPoint IdentityIQ, которые позволяют повысить эффект от применения технологии IdM.<p><br><br>Что вы получите от вебинара:<br></p><ol><li>Вы увидите способы решения насущных проблем контроля и управления правами доступа.</li><li>Вы познакомитесь с новинкой рынка IdM – SailPoint IdentityIQ.</li><li>Вы сможете пообщаться с экспертами в области IdM.</li><li>Вы узнаете, как получить больше от вашего IdM.</li></ol><br>Почему вебинар будет вам интересен:\r\n<ul><li>компания «Инфосистемы Джет» – один из самых опытных отечественных интеграторов по теме IdM, и единственный в России интегратор с опытом внедрения SailPoint IdentityIQ;</li><li>SailPoint IdentityIQ – одно из лучших IdM-решений, которое имеет большое количество функциональных нововведений, позволяющих решить более широкий круг задач и по оценке западных аналитиков является наиболее зрелым.</li></ul>\r\n<hr><br>Спикер – <b>Дмитрий Бондарь, менеджер по развитию направления IdM Центра информационной безопасности компании «Инфосистемы Джет»</b><p><br><br>Окончил Московский Технический Университет Связи и Информатики по специальности «Прикладная математика». С 2002 года работает в сфере ИТ. За это время успел потрудиться над созданием web-сайтов, разработкой ПО, проектированием архитектуры корпоративных информационных систем. В 2008 году пришел на работу в компанию «Инфосистемы Джет» в качестве ведущего разработчика систем Identity Management. За 6 лет работы в отделе IdM-решений участвовал в нескольких ключевых проектах внедрения IdM в разных ролях – как разработчик, аналитик и архитектор. В настоящее время отвечает за развитие направления Identity &amp; Access Management в Центре информационной безопасности.<br></p><hr><br><b>Регистрация на вебинар:</b> <a href="http://www.jetinfo.ru/events/upravlenie-dostupom-20-aktualnyj-podkhod-k-resheniyu-nasuschnykh-problem-na-baze-resheniya-sailpoint-identityiq#regform">http://www.jetinfo.ru/events/upravlenie-dostupom-20-aktualnyj-podkhod-k-resheniyu-nasuschnykh-problem-na-baze-resheniya-sailpoint-identityiq#regform</a>', '', '', 1, 1414735351, 1414735351),
(10, 'Гибкая настройка графиков в JavaFX', 'gibkaya-nastroyka-grafikov-v-javafx', 4, NULL, '<p>JavaFX довольно странная штука. С одной стороны он кажется безумно продуманным и удобным настолько, что хочется использовать его где только можно. А с другой стороны он настолько топорный, что хочется его переписать. Некоторые части графического интерфейса работают совсем странно, другие объявлены как <b>final</b> и дополнить их невозможно. <br>Если вам интересно, как представлены графические элементы в JavaFX и как можно разнообразить свой график, то открывайте кат, на свой страх и риск.</p>', '<p>JavaFX довольно странная штука. С одной стороны он кажется безумно продуманным и удобным настолько, что хочется использовать его где только можно. А с другой стороны он настолько топорный, что хочется его переписать. Некоторые части графического интерфейса работают совсем странно, другие объявлены как <b>final</b> и дополнить их невозможно. </p><p>Если вам интересно, как представлены графические элементы в JavaFX и как можно разнообразить свой график, то открывайте кат, на свой страх и риск.<br><a name="habracut"></a><br></p><h4>Структура графического интерфейса в JavaFX</h4><br>JavaFX — это <a href="https://ru.wikipedia.org/wiki/Rich_Internet_Application">RIA</a> фреймворк. Так же, все настройки вида графических элементов можно изменить только через СSS, что делать невозможным обычные методы изменение интерфейса, которые использовались в Swing или AWT через Graphics.<br>Так же, в отличии от других Java GUI фреймворков, создавать новые графические элементы в JavaFX <b>крайне сложно</b> из-за сложной реализации самого JavaFX. Поэтому, во время создания своих элементов их конструируют из старых.<p><br><br>Так поступают и сами разработчики JavaFX во время создания сложных контроллов, таких как графики. <br>В этом нет ничего нового, но главное отличие JavaFX от остальных фрейворков состоит в том, что структура являет собой дерево с полным доступом, то есть можно достучатся до <b>всех</b> этих элементов и легко настроить их (через CSS или еще как-то).</p><p><br><br>В качестве примера, я приведу настройку LineChart.</p><p><br><br></p><h4>Настройка LineChart</h4><br>Что бы что-то настроить, нужно четко понимать, из чего оно стоит. <br>Понять, из чего же состоит LineChart нам поможет функция lookupAll и наконец-то адекватный перевод компонентов JavaFX в строку.<p><br><br>Выполнив такой код:</p><p><br><br></p><pre><code>VBox vBox = <span class="keyword" data-redactor-tag="span">new</span> VBox(); LineChart chart = <span class="keyword">new</span> LineChart(<span class="keyword">new</span> NumberAxis(), <span class="keyword">new</span> NumberAxis()); chart.getData().add(<span class="keyword">new</span> XYChart.Series&lt;&gt;(<span class="string">"Temp1"</span>, FXCollections.observableArrayList(<span class="keyword">new</span> XYChart.Data&lt;Object, Object&gt;(<span class="number">1</span>, <span class="number">1</span>), <span class="keyword">new</span> XYChart.Data&lt;Object, Object&gt;(<span class="number">2</span>, <span class="number">2</span>), <span class="keyword">new</span> XYChart.Data&lt;Object, Object&gt;(<span class="number">3</span>, <span class="number">4</span>)))); vBox.getChildren().add(chart); primaryStage.setScene(<span class="keyword">new</span> Scene(vBox)); primaryStage.show(); ((XYChart.Series) chart.getData().get(<span class="number">0</span>)).getData().addAll(<span class="keyword">new</span> XYChart.Data&lt;&gt;(<span class="number">5</span>, <span class="number">5</span>)); chart.lookupAll(<span class="string">"*"</span>).forEach(c-&gt;{ System.out.println(c); System.out.println(); }); </code></pre>\r\n<p><span class="spoiler_title">Результат</span></p><br>И проанализировав результат, можно легко понять, из каких компонентов состоит LineChart:<p><br><br><img src="http://habrastorage.org/files/6c5/904/d1f/6c5904d1fffe42438cdd0509422e961d.png"></p><p><br><br>Поскольку своей целью я поставил замену всех узлов графика на картинку и создание всплывающих сообщений над каждом из них, то мне нужна часть, в которой находятся узлы.</p><p><br><br></p><h5>Замена кружков на картинки</h5><br>В обычном JavaFX, узлы графика представляются кружками с пустой серединой. Что бы узнать, как они создаются, мне пришлось немного полазить по коду LineChart (спасибо Oracle за открытые сырцы) и получил такой фрагмент кода:<p><br><br></p><pre><code><span class="keyword" data-redactor-tag="span">private</span> Node createSymbol(Series&lt;X, Y&gt; series, <span class="keyword">int</span> seriesIndex, <span class="keyword">final</span> Data&lt;X,Y&gt; item, <span class="keyword">int</span> itemIndex) { Node symbol = item.getNode(); <span class="comment">// check if symbol has already been created</span> <span class="keyword">if</span> (symbol == <span class="keyword">null</span> &amp;&amp; getCreateSymbols()) { symbol = <span class="keyword">new</span> StackPane(); item.setNode(symbol); } <span class="comment">// set symbol styles</span> <span class="keyword">if</span> (symbol != <span class="keyword">null</span>) symbol.getStyleClass().addAll(<span class="string">"chart-line-symbol"</span>, <span class="string">"series"</span> + seriesIndex, <span class="string">"data"</span> + itemIndex, series.defaultColorStyleClass); <span class="keyword">return</span> symbol; } </code></pre><br>Получается, узел представляет собой обычную панель, которая настроилась через CSS. Найдем CSS код, который используется для настройки узла (находится в /com/sun/javafx/scene/control/skin/caspian/caspian.css):<p><br><br></p><pre><code><span class="class" data-redactor-tag="span">.chart-line-symbol</span> <span class="rules">{ <span class="rule" data-redactor-class="rule"><span class="attribute">-fx-background-color</span>: <span class="hexcolor">#f9d900</span>, white;</span></span> <span class="rule"><span class="attribute" data-redactor-class="attribute">-fx-background-insets</span>: <span class="number">0</span>, <span class="number">2</span>;</span> <span class="rule"><span class="attribute" data-redactor-class="attribute">-fx-background-radius</span>: <span class="number">5</span>px;</span> <span class="rule"><span class="attribute" data-redactor-class="attribute">-fx-padding</span>: <span class="number">5</span>px;</span> <span class="rule">}</span> </code></pre><br>То есть, для изменение, достаточно переопеределить класс <i>chart-line-symbol</i>.<br>Создадим такой CSS файл:<p><br><br></p><pre><code><span class="class" data-redactor-tag="span">.chart-line-symbol</span> <span class="rules">{ <span class="rule" data-redactor-class="rule"><span class="attribute">-fx-background-image</span>: <span class="function">url(%путь к картинке%)</span>;</span></span> <span class="rule">}</span> </code></pre><br>И добавим этот файл к графику:<p><br><br></p><pre><code>VBox vBox = <span class="keyword" data-redactor-tag="span">new</span> VBox(); LineChart chart = <span class="keyword">new</span> LineChart(<span class="keyword">new</span> NumberAxis(), <span class="keyword">new</span> NumberAxis()); chart.getStylesheets().add(Main.class.getResource(<span class="string">"Путь к css файлу"</span>).toExternalForm()); chart.getData().add(<span class="keyword">new</span> XYChart.Series&lt;&gt;(<span class="string">"Temp1"</span>, FXCollections.observableArrayList(<span class="keyword">new</span> XYChart.Data&lt;Object, Object&gt;(<span class="number">1</span>, <span class="number">1</span>), <span class="keyword">new</span> XYChart.Data&lt;Object, Object&gt;(<span class="number">2</span>, <span class="number">2</span>), <span class="keyword">new</span> XYChart.Data&lt;Object, Object&gt;(<span class="number">3</span>, <span class="number">4</span>)))); vBox.getChildren().add(chart); primaryStage.setScene(<span class="keyword">new</span> Scene(vBox)); primaryStage.show(); ((XYChart.Series) chart.getData().get(<span class="number">0</span>)).getData().addAll(<span class="keyword">new</span> XYChart.Data&lt;&gt;(<span class="number">5</span>, <span class="number">5</span>)); </code></pre><br>Полученный результат можно увидеть на первой картинке.<p><br><br></p><h5>Всплывающие подсказки в узлах</h5><br>Эту фичу добавить несколько сложнее, так как при помощи CSS это не получится. <br>Вернемся к той части кода, где в LineChart создавался символ:<p><br><br></p><pre><code><span class="keyword" data-redactor-tag="span">private</span> Node createSymbol(Series&lt;X, Y&gt; series, <span class="keyword">int</span> seriesIndex, <span class="keyword">final</span> Data&lt;X,Y&gt; item, <span class="keyword">int</span> itemIndex) { Node symbol = item.getNode(); <span class="comment">// check if symbol has already been created</span> <span class="keyword">if</span> (symbol == <span class="keyword">null</span> &amp;&amp; getCreateSymbols()) { symbol = <span class="keyword">new</span> StackPane(); item.setNode(symbol); } <span class="comment">// set symbol styles</span> <span class="keyword">if</span> (symbol != <span class="keyword">null</span>) symbol.getStyleClass().addAll(<span class="string">"chart-line-symbol"</span>, <span class="string">"series"</span> + seriesIndex, <span class="string">"data"</span> + itemIndex, series.defaultColorStyleClass); <span class="keyword">return</span> symbol; } </code></pre><br>Как можно заметить, дальше символ хранится в объекте Data&lt;X,Y&gt;, который задает точку графика.<br>То есть, можно просто пройтись по всем точкам в Series и для всех установить всплывающие подсказки:<p><br><br></p><pre><code>ObservableList&lt;XYChart.Data&gt; dataList = ((XYChart.Series) chart.getData().get(<span class="number" data-redactor-tag="span">0</span>)).getData(); dataList.forEach(data-&gt;{ Node node = data.getNode(); Tooltip tooltip = <span class="keyword">new</span> Tooltip(<span class="string">''(''</span>+data.getXValue().toString()+<span class="string">'';''</span>+data.getYValue().toString()+<span class="string">'')''</span>); Tooltip.install(node, tooltip); }); </code></pre><br>После запуска наведите на узел графика и увидите результат.<p><br><br></p><h4>Заключение</h4><br>Надеюсь, у меня получилось показать способы настроек компонентов в JavaFX и их модификацию. Разумеется, тем, что я представил, возможности не ограничиваются. В частности, можно сделать модификацию LineChart (<a href="https://github.com/SirEdvin/AnjiLibrary/blob/master/src%2Fcom%2Fdarkempire%2Fanjifx%2Fscene%2Fchart%2FAnjiLineChart.java">как поступил я</a>), в которой можно будет динамически менять цвета, и которая будет добавлять всплывающие подсказки. Можно менять вид фона, сетки, осей и подписей. Вообщем, настраивать как душе угодно. Главное — помнить, что статические настройки необходимо выносить в CSS, а всю динамику, к несчастью, в код.', '', '', 1, 1414735442, 1414735442);
INSERT INTO `articles` (`id`, `title`, `alias`, `category_id`, `author_id`, `snippet`, `content`, `image_url`, `preview_url`, `status_id`, `created_at`, `updated_at`) VALUES
(11, 'Cohesion in Enterprise Applications', 'cohesion-in-enterprise-applications', 4, NULL, '<h2>Введение</h2><br>Структура кода, структура проекта, дизайн проекта, архитектура проекта — эти понятия могут иметь различные значения, сложность или глубину для архитектора, разработчика, руководителя проекта или консультанта. Дальше должно идти долгое копание в терминологии, однако позвольте мне быть ленивым и считать, что в рамках этой статьи все эти понятия выражают примерно одно и то же, а именно набор шаблонов, правил, которые говорят, каким образом нужно писать код, правильно реагируя на приходящие требования. К примеру, если для доступа к базе данных мы используем DAO (Data Access Object), то вместе с созданием новой структуры в базе данных, нужно будет создать новый DAO или расширить существующий, но никак не писать SQL, скажем, на уровне презентации.<p><br><br>Что бы стало еще понятнее, добавлю, что речь пойдет о том же, о чем писал «классик» — Patterns of enterprise application architecture by M. Fowler.</p>', '<h2>Введение</h2><br>Структура кода, структура проекта, дизайн проекта, архитектура проекта — эти понятия могут иметь различные значения, сложность или глубину для архитектора, разработчика, руководителя проекта или консультанта. Дальше должно идти долгое копание в терминологии, однако позвольте мне быть ленивым и считать, что в рамках этой статьи все эти понятия выражают примерно одно и то же, а именно набор шаблонов, правил, которые говорят, каким образом нужно писать код, правильно реагируя на приходящие требования. К примеру, если для доступа к базе данных мы используем DAO (Data Access Object), то вместе с созданием новой структуры в базе данных, нужно будет создать новый DAO или расширить существующий, но никак не писать SQL, скажем, на уровне презентации.<p><br><br>Что бы стало еще понятнее, добавлю, что речь пойдет о том же, о чем писал «классик» — Patterns of enterprise application architecture by M. Fowler. <a name="habracut"></a>Речь в книге идет в общем о том, как делить функционал, т.е. какой метод какому классу должен принадлежать. </p><p><br><br></p><h2>Проблема</h2><br>Начнем с примера. Нашей задачей будет написать систему обработки запросов на получение визы в страну Ос. Система должна позволять создавать запрос, состоящий из контактных данных и данных о месте работы; отправлять запрос на обработку в визовый центр; принимать решение о выдаче или отказе в визе; генерировать некий отчет о человеке, который подает документы; доставлять паспорт на летающих обезьянах. Кроме того, запрос может быть оформлен на несколько человек.<p><br><br>В упрощенной форме, структура запроса может выглядеть следующим образом:</p><p><br><br></p><pre>&lt;code&gt;&lt;span class="class"&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="title"&gt;VisaRequest&lt;/span&gt;{&lt;/span&gt; Collection&lt;Applicant&gt; applicants } &lt;span class="class"&gt;&lt;span class="keyword" data-redactor-class="keyword"&gt;class&lt;/span&gt; &lt;span class="title"&gt;Applicant&lt;/span&gt;{&lt;/span&gt; Contact contact WokrInfo workInfo } … </pre><br>Не забываем, что и язык программирования магический (т. е. без магии не компилируется), хотя и похож на groovy.<p><br><br>Сам функционал в этом случае может выглядеть как-то так:<br></p><pre>&lt;code&gt;&lt;span class="class"&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="title"&gt;VisaRequestService&lt;/span&gt; {&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword" data-redactor-class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;create&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="function" data-redactor-class="function"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;visaRequest&lt;/span&gt;){...}&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword" data-redactor-class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;update&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="function" data-redactor-class="function"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;visaRequest&lt;/span&gt;){...}&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword" data-redactor-class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;get&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="function" data-redactor-class="function"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;requestId&lt;/span&gt;){}&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword" data-redactor-class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;submit&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="function" data-redactor-class="function"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;requestId&lt;/span&gt;){...}&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword" data-redactor-class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;getDecision&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="function" data-redactor-class="function"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;requestId&lt;/span&gt;, &lt;/span&gt;&lt;span class="function"&gt;&lt;span class="keyword" data-redactor-class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;applicantName&lt;/span&gt;){...}&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword" data-redactor-class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;generateReport&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="function" data-redactor-class="function"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;requestId&lt;/span&gt;, &lt;/span&gt;&lt;span class="function"&gt;&lt;span class="keyword" data-redactor-class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;applicantName&lt;/span&gt;){...}&lt;/span&gt; } &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;</pre><p><br><br>Диаграмма классов такой системы, отражающая уровнь сервисов и модель данных, показана ниже.</p><p><br><br><img src="http://habrastorage.org/files/622/52a/2d1/62252a2d106443b48e08c486d4daeb9a.png"></p><p><br><br>Что же пишет по-этому поводу Мартин Фаулер? Я не буду пересказывать книгу, скажу лишь, что наравне со всем прочим, он обращает внимание на тот факт, что с добавлением функциональности класс типа VisaRequestService будет расти, а переиспользовать написанные методы будет все сложнее и сложнее, так как каждый метод представляет собой фактически скрипт, специфичный для конкретного сценария. Не будем с ним спорить, а обратим внимание на понятие из заголовка статьи — cohesion. Cohesion это свойство объекта / класса, определяющие насколько объект / класс занят своим делом. Если cohesion низкое, то у класса слишком много ответственности, класс делает слишком много различных операций, отчего становится большим, а большой класс тяжело читать, тяжело расширять и т. д.</p><p><br><br>В нашем тривиальном случае мы фактически создали God Сlass, который заведует всем. Безусловно, это не единственное решение и мы могли бы создать отдельный DecisionService:</p><p><br><br></p><pre>&lt;code&gt;&lt;span class="class"&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="title"&gt;DecisionService&lt;/span&gt;{&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword" data-redactor-class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;getDecision&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="function" data-redactor-class="function"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;requestId&lt;/span&gt;, &lt;/span&gt;&lt;span class="function"&gt;&lt;span class="keyword" data-redactor-class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;applicantName&lt;/span&gt;){...}&lt;/span&gt; } &lt;/span&gt;&lt;/span&gt;</pre><br>или отдельный SubmitService:<pre>&lt;code&gt;class SubmitService{ def submit(def requestId){&lt;span class="keyword"&gt;...&lt;/span&gt;} } </pre><br>или отдельный ApplicantService:<pre>&lt;code&gt;&lt;span class="class"&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="title"&gt;ApplicantService&lt;/span&gt;{&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword" data-redactor-class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;getDecision&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="function" data-redactor-class="function"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;requestId&lt;/span&gt;, &lt;/span&gt;&lt;span class="function"&gt;&lt;span class="keyword" data-redactor-class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;applicantName&lt;/span&gt;){...}&lt;/span&gt; &lt;span class="function"&gt;&lt;span class="keyword" data-redactor-class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;generateReport&lt;/span&gt;&lt;span class="params"&gt;(&lt;span class="function" data-redactor-class="function"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;requestId&lt;/span&gt;, &lt;/span&gt;&lt;span class="function"&gt;&lt;span class="keyword" data-redactor-class="keyword"&gt;def&lt;/span&gt; &lt;span class="title"&gt;applicantName&lt;/span&gt;){...}&lt;/span&gt; } &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;</pre><p><br><br>или еще что-нибудь (все-таки страна Ос). <br>Во всех этих примерах cohesion новых классов кажется довольно хорошим, но не во всех мы улучшаем cohesion существующих. В первых двух случаях, если мы ограничиваемся созданием только одного из этих классов, VisaRequestService все равно продолжает делать слишком много. Кроме того, остаются неясными причины, почему мы разбили класс именно таким образом.</p><p><br><br></p><h2>Решение</h2><h3>Классическое</h3><br>Фаулер решает это проблему перекладывая ее целиком и полностью на плечи ООП. Он вводит понятие Rich Data Model, которое является ни чем иным, как честным совмещением данных и методов в одном классе, что и есть одна из основ ООП. Rich Data Model для нашей системы будет выглядеть следующим образом:<p><br><br></p><pre>&lt;code&gt;class VisaRequest{ Collection&lt;Applicant&gt; applicants def create(){&lt;span class="keyword"&gt;...&lt;/span&gt;} def update(){&lt;span class="keyword"&gt;...&lt;/span&gt;} def get(){} def submit(){&lt;span class="keyword"&gt;...&lt;/span&gt;} } class Applicant{ Contact contact WokrInfo workInfo def getDecision(){&lt;span class="keyword"&gt;...&lt;/span&gt;} def generateReport(){&lt;span class="keyword"&gt;...&lt;/span&gt;} def create(){&lt;span class="keyword"&gt;...&lt;/span&gt;} def update(){&lt;span class="keyword"&gt;...&lt;/span&gt;} def get(){} } </pre><p><br><br>Разбиение функциональности происходит по очень простому правилу: класс содержит только методы, относящиеся к сущности, которую данный класс отражает. Конечно же это определение не строгое, как, впрочем, и определение самого cohesion. </p><p><br><br>Rich Data Model удобна для ряда систем, например в случае сложных вычислений, но небольшого количества операций на сущность и слабого взаимодействия с внешней средой, однако далеко не всегда. Сему есть несколько причин, но самых главных, пожалуй, две. </p><p><br><br>Первая из них — такая модель statefull, т. е. объект имеет некоторое состояние. До тех пор, пока состояние имели только структуры данных, это не представляло никакой проблемы, однако теперь объекты, несущие функциональность системы, тоже имеют состояние. На практике это приводит к усложнению процесса создания таких объектов. Фактически, это делает весьма проблематичным использование популярных DI (Dependency Injection) контейнеров, таких как spring. Кроме того, если говорить о J2EE или WEB, никто не отменял необходимости создавать фасады (actions в spring), что приводит к новому слою функциональности, который непонятно как структурировать.</p><p><br><br>Вторая причина — в больших системах мы действительно можем иметь множество операций, применимых к одной сущности, что может породить большой класс и нам придется придумывать новую технику разбиение, усложняющую общий дизайн. </p><p><br><br></p><h3>Не классическое</h3><br>Попробуем решить проблему несколько иным способом, используя все те же сервисы. Почему их? Хотя бы потому, что сервисы пользуются большой популярностью среди программистов. Возникает вопрос, как же правильно их использовать, обходя острые углы и препятствия описанные выше. На мой взгляд, самым удобным способом является разбиение по двум координатам — структуре (элементу) данных и функциональности, что должно отражаться в имени сервиса.<p><br><br><img src="http://habrastorage.org/files/317/c6e/dac/317c6edac3614b649c8c5f922672f51e.png"></p><p><br><br>Следуя этому правилу, мы получим следующие сервисы для нашей системы:<br></p><pre>&lt;code&gt;class VisaRequestCRUDService { def create(def visaRequest){&lt;span class="keyword"&gt;...&lt;/span&gt;} def update(def visaRequest){&lt;span class="keyword"&gt;...&lt;/span&gt;} def get(def requestId){&lt;span class="keyword"&gt;...&lt;/span&gt;} def getDecision(def requestId, def applicantName){&lt;span class="keyword"&gt;...&lt;/span&gt;} } class VisaRequestActionService { def submit(def requestId){&lt;span class="keyword"&gt;...&lt;/span&gt;} } class ApplicantCRUDService{ def create(def Applicant){&lt;span class="keyword"&gt;...&lt;/span&gt;} def update(def Applicant){&lt;span class="keyword"&gt;...&lt;/span&gt;} def get(def applicantId){&lt;span class="keyword"&gt;...&lt;/span&gt;} def create(def Applicant){&lt;span class="keyword"&gt;...&lt;/span&gt;} } class ApplicantInfoService{ def getDecision(def requestId, def applicantName){&lt;span class="keyword"&gt;...&lt;/span&gt;} def generateReport(def requestId, def applicantName){&lt;span class="keyword"&gt;...&lt;/span&gt;} } </pre><p><br><br>Примерно так будет выглядеть диаграмма классов:</p><p><br><br><img src="http://habrastorage.org/files/885/e86/544/885e865440864041a636ebf9f8c2e4a5.png"></p><p><br><br>Преимущества такого подхода достаточно очевидны. Во-первых, мы имеем практически все плюсы, что и при использовании Rich Data Model, только вместо одного класса у нас будет два, что уменьшает связность, что есть хорошо. Во-вторых, мы явно указываем механизм (правило) дальнейшего улучшения cohesion, что сводит к минимуму загрязнения системы. <br>Есть еще один, не совсем очевидный плюс. Модель данных не всегда совпадает с доменной моделью, при этом операции всегда принадлежат доменной модели. Приведенное выше решение позволяет отразить различия между этими двумя моделями на координате функционала. Для примера давайте вспомним про летающих обезьян. Исходя из требований, у них нет никаких характеристик, т. е. нам не надо хранить о них никакой информации и соответственно им нечего делать в модели данных. С другой стороны, они есть в доменной модели, что мы может отразить в сервисе, зависящим от класса VisaRequest:</p><p><br><br></p><pre>&lt;code&gt;class FlyApesRequestDeliveryService{ def deliver(def Request){&lt;span class="keyword"&gt;...&lt;/span&gt;} } </pre><p><br><br>Конечно, у описанного подхода есть и минусы. Та же гибкость разбиения по координате функционала рождает неочевидность этого разбиения. Разработчик должен иметь четкое представление о типе системы и наборе выполняемых операций (хотя бы на уровне бизнес требований), чтобы грамотно использовать данный дизайн. </p><p><br><br></p><h2>Вместо заключения</h2><br>Я думаю с cohesion все более или менее понятно, а что же с enterprise? Корпоративные приложения интересны тем, что над ними, как правило, работают несколько команд, возможно разбитых географически. Много команд — много людей, много людей — много вопросов. Где и как реализовать новый функционал? Есть ли в системе похожий? Новый разработчик — новый подход. <p><br><br>Все это рождает множество проблем, однако, самой сложной с технической точки зрения является грязный код (а плохая структура классов это один из ярких примеров грязного кода). Систему с грязным кодом довольно часто проще переписать, чем исправить. Я уверен, что далеко не все со мной согласятся, но я бы сказал, что cohesion, таким образом, является одним из главных показателей здоровья системы.</p><p><br><br>Пожалуй, на этом следует закончить. Надеюсь статья будет кому-нибудь полезна, но если описанные выше проблемы вам не знакомы, вы знаете, что такое эволюционный дизайн и он работает в вашей команде — забудьте все, что здесь написано, вы уже в стране Ос.</p>', '', '', 1, 1414735486, 1414829657);

-- --------------------------------------------------------

--
-- Структура таблицы `pages`
--

CREATE TABLE IF NOT EXISTS 'pages' (
`id` int(11) NOT NULL,
  `title` varchar(100) NOT NULL,
  `alias` varchar(100) NOT NULL,
  `content` longtext NOT NULL,
  `status_id` tinyint(4) NOT NULL DEFAULT '0',
  `created_at` int(11) NOT NULL,
  `updated_at` int(11) NOT NULL
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

--
-- Дамп данных таблицы `pages`
--

INSERT INTO 'pages' (`id`, `title`, `alias`, `content`, `status_id`, `created_at`, `updated_at`) VALUES
(1, 'Sitemap. Класс для PHP5', 'sitemap-klass-dlya-php5', '<p><strong>sitemaps.org:</strong></p><blockquote>С помощью файла Sitemap веб-мастеры могут сообщать поисковым системам о веб-страницах, которые доступны для сканирования. Файл Sitemap представляет собой XML-файл, в котором перечислены URL-адреса веб-сайта в сочетании с метаданными, связанными с каждым URL-адресом (дата его последнего изменения; частота изменений; его приоритетность на уровне сайта), чтобы поисковые системы могли более грамотно сканировать этот сайт.</blockquote><p><a href="http://www.sitemaps.org/ru/">Официальный сайт</a></p><p>В начале этой недели я решил, что пора сделать себе генерируемый sitemap. Хотелось как можно более универсального решения, что в общем-то удалось.</p><h3>Что может класс</h3><ul><li>Генерить Sitemap :)</li><li>Писать сгенерённое в файл.</li><li>Расставлять tab-ы.</li><li>Экранировать URL в соответствии со спецификацией.</li><li>Приводить время в формате timestamp к нужному формату.</li><li>Работать как <a href="http://code-igniter.ru/user_guide/general/libraries.html">библиотека CodeIgniter</a>.</li></ul><h3>Пример</h3><pre>&lt;span class="php-hl-comment"&gt;//&lt;/span&gt; Создаём класс. &lt;span class="php-hl-var"&gt;$sitemap&lt;/span&gt; = &lt;strong&gt;new&lt;/strong&gt; &lt;span class="php-hl-identifier"&gt;Sitemap&lt;/span&gt;&lt;span class="php-hl-brackets"&gt;(&lt;/span&gt;&lt;span class="php-hl-brackets"&gt;)&lt;/span&gt;&lt;span class="php-hl-code"&gt;; &lt;/span&gt;&lt;span class="php-hl-comment"&gt;//&lt;/span&gt; Добавим страничку &lt;span class="php-hl-var"&gt;$sitemap&lt;/span&gt;&lt;span class="php-hl-code"&gt;-&gt;&lt;/span&gt;&lt;span class="php-hl-identifier"&gt;addItem&lt;/span&gt;&lt;span class="php-hl-brackets"&gt;(&lt;/span&gt;&lt;strong&gt;new&lt;/strong&gt; &lt;span class="php-hl-identifier"&gt;SitemapItem&lt;/span&gt;&lt;span class="php-hl-brackets"&gt;(&lt;/span&gt; &lt;span class="php-hl-quotes"&gt;''&lt;/span&gt;&lt;span class="php-hl-string"&gt;http://rmcreative.ru/&lt;/span&gt;&lt;span class="php-hl-quotes"&gt;''&lt;/span&gt;&lt;span class="php-hl-code"&gt;, &lt;/span&gt;&lt;span class="php-hl-comment"&gt;//&lt;/span&gt; URL. &lt;span class="php-hl-identifier"&gt;time&lt;/span&gt;&lt;span class="php-hl-brackets"&gt;(&lt;/span&gt;&lt;span class="php-hl-brackets"&gt;)&lt;/span&gt;&lt;span class="php-hl-code"&gt;, &lt;/span&gt;&lt;span class="php-hl-comment"&gt;//&lt;/span&gt; Время в формате timestamp. &lt;span class="php-hl-identifier"&gt;SitemapItem&lt;/span&gt;&lt;span class="php-hl-code"&gt;::&lt;/span&gt;&lt;span class="php-hl-identifier"&gt;daily&lt;/span&gt;&lt;span class="php-hl-code"&gt;, &lt;/span&gt;&lt;span class="php-hl-comment"&gt;//&lt;/span&gt;&lt;span class="php-hl-comment"&gt;Частота обновления (константы класса SitemapItem).&lt;/span&gt; &lt;span class="php-hl-number"&gt;0&lt;/span&gt;&lt;span class="php-hl-number"&gt;.7&lt;/span&gt; &lt;span class="php-hl-comment"&gt;//&lt;/span&gt; Приоритет страницы. &lt;span class="php-hl-brackets"&gt;)&lt;/span&gt;&lt;span class="php-hl-brackets"&gt;)&lt;/span&gt;&lt;span class="php-hl-code"&gt;; &lt;/span&gt;&lt;span class="php-hl-comment"&gt;//&lt;/span&gt; Добавим все остальные страницы сайта. &lt;strong&gt;foreach&lt;/strong&gt;&lt;span class="php-hl-brackets"&gt;(&lt;/span&gt;&lt;span class="php-hl-var"&gt;$pages&lt;/span&gt; &lt;strong&gt;as&lt;/strong&gt; &lt;span class="php-hl-var"&gt;$page&lt;/span&gt;&lt;span class="php-hl-brackets"&gt;)&lt;/span&gt;&lt;span class="php-hl-brackets"&gt;{&lt;/span&gt; &lt;span class="php-hl-var"&gt;$sitemap&lt;/span&gt;&lt;span class="php-hl-code"&gt;-&gt;&lt;/span&gt;&lt;span class="php-hl-identifier"&gt;addItem&lt;/span&gt;&lt;span class="php-hl-brackets"&gt;(&lt;/span&gt;&lt;strong&gt;new&lt;/strong&gt; &lt;span class="php-hl-identifier"&gt;SitemapItem&lt;/span&gt;&lt;span class="php-hl-brackets"&gt;(&lt;/span&gt; &lt;span class="php-hl-quotes"&gt;''&lt;/span&gt;&lt;span class="php-hl-string"&gt;http://rmcreative.ru/&lt;/span&gt;&lt;span class="php-hl-quotes"&gt;''&lt;/span&gt;&lt;span class="php-hl-code"&gt;.&lt;/span&gt;&lt;span class="php-hl-var"&gt;$page&lt;/span&gt;&lt;span class="php-hl-code"&gt;-&gt;&lt;/span&gt;&lt;span class="php-hl-identifier"&gt;url&lt;/span&gt;&lt;span class="php-hl-code"&gt;, &lt;/span&gt;&lt;span class="php-hl-var"&gt;$page&lt;/span&gt;&lt;span class="php-hl-code"&gt;-&gt;&lt;/span&gt;&lt;span class="php-hl-identifier"&gt;updated_on&lt;/span&gt;&lt;span class="php-hl-code"&gt;, &lt;/span&gt;&lt;span class="php-hl-identifier"&gt;SitemapItem&lt;/span&gt;&lt;span class="php-hl-code"&gt;::&lt;/span&gt;&lt;span class="php-hl-identifier"&gt;monthly&lt;/span&gt; &lt;span class="php-hl-brackets"&gt;)&lt;/span&gt;&lt;span class="php-hl-brackets"&gt;)&lt;/span&gt;&lt;span class="php-hl-code"&gt;; &lt;/span&gt;&lt;span class="php-hl-brackets"&gt;}&lt;/span&gt; &lt;span class="php-hl-comment"&gt;//&lt;/span&gt; Сгенерим sitemap в файл sitemap.xml. &lt;span class="php-hl-comment"&gt;//&lt;/span&gt; Если файл не указать - generate вернёт строку. &lt;span class="php-hl-var"&gt;$sitemap&lt;/span&gt;&lt;span class="php-hl-code"&gt;-&gt;&lt;/span&gt;&lt;span class="php-hl-identifier"&gt;generate&lt;/span&gt;&lt;span class="php-hl-brackets"&gt;(&lt;/span&gt;&lt;span class="php-hl-quotes"&gt;''&lt;/span&gt;&lt;span class="php-hl-string"&gt;sitemap.xml&lt;/span&gt;&lt;span class="php-hl-quotes"&gt;''&lt;/span&gt;&lt;span class="php-hl-brackets"&gt;)&lt;/span&gt;&lt;span class="php-hl-code"&gt;;&lt;/span&gt;</pre><h3>Сам класс</h3><p><a href="http://rmcreative.ru/files/src/sitemap.rar">Забираем</a></p>', 1, 1414465564, 1414729933);


/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
